<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YangMeng&#39;Blog</title>
  
  
  <link href="https://www.itcode.net.cn/atom.xml" rel="self"/>
  
  <link href="https://www.itcode.net.cn/"/>
  <updated>2023-08-14T14:54:16.461Z</updated>
  <id>https://www.itcode.net.cn/</id>
  
  <author>
    <name>yangmeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字典树Tire</title>
    <link href="https://www.itcode.net.cn/posts/e41f7f44/"/>
    <id>https://www.itcode.net.cn/posts/e41f7f44/</id>
    <published>2023-08-14T14:46:03.000Z</published>
    <updated>2023-08-14T14:54:16.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典树数据结构"><a href="#字典树数据结构" class="headerlink" title="字典树数据结构"></a>字典树数据结构</h2><p>是一种搜索树，一种已排序的数据结构，通常用于存储动态集或键为字符串的关联数组。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p><p><img src="https://img.itcode.net.cn/blog/202308142249820.png" alt="image-20230814224935665"></p><ul><li>这是一个把 battle 单词字符串，按照字母拆分到字典树进行存放的图。</li><li>键标注在节点中，值标注在节点之下。每一个完整的英文单词对应一个特定的整数。也就是26个字母对应的 ASCII 转换后的值。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>字典树字母的存放有26个，也就是说在实现的过程中，每一个节点的分支都有26个槽位用来存放可能出现的字母组合。同理如果是数字树的话就是10个数字的组合，每个字典树上的节点对应的分支则有10个操作存放可能出现组合的数字。</p><h3 id="树枝节点"><a href="#树枝节点" class="headerlink" title="树枝节点"></a>树枝节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class TrieNode &#123;</span><br><span class="line"></span><br><span class="line">    /** 形成一个链 */</span><br><span class="line">    public TrieNode[] slot = new TrieNode[26];</span><br><span class="line"></span><br><span class="line">    /** 字母 */</span><br><span class="line">    public char c;</span><br><span class="line"></span><br><span class="line">    /** 单词：数量 &gt; 0 表示一个单词 */</span><br><span class="line">    public boolean isWord;</span><br><span class="line"></span><br><span class="line">    /** 前缀 */</span><br><span class="line">    public int prefix;</span><br><span class="line"></span><br><span class="line">    /** 单词：具体的一个单词字符串 */</span><br><span class="line">    public String word;</span><br><span class="line"></span><br><span class="line">    /** 解释：单词的注释说明 */</span><br><span class="line">    public String explain;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>字典的树的节点需要包括此节点内嵌的关联节点，之后是节点的字母、到此字母是否为单词、单词的前缀、单词字符串和当前单词的非必要注释。</li></ul><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p><img src="https://img.itcode.net.cn/blog/202308142251802.png" alt="image-20230814225147254"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void insert(String words, String explain) &#123;</span><br><span class="line">    TrieNode root = wordsTree;</span><br><span class="line">    char[] chars = words.toCharArray();</span><br><span class="line">    for (char c : chars) &#123;</span><br><span class="line">        int idx = c - &#x27;a&#x27;; // - a 从 0 开始，参考 ASCII 码表</span><br><span class="line">        if (root.slot[idx] == null) &#123;</span><br><span class="line">            root.slot[idx] = new TrieNode();</span><br><span class="line">        &#125;</span><br><span class="line">        root = root.slot[idx];</span><br><span class="line">        root.c = c;</span><br><span class="line">        root.prefix++;</span><br><span class="line">    &#125;</span><br><span class="line">    root.explain = explain; // 单词的注释说明信息</span><br><span class="line">    root.isWord = true;     // 循环拆解单词后标记</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>insert 方法接收单词和注释信息，并对一个单词按照 char 进行拆分，拆分后则计算出索引位置并以此存放。存放完成后标记单词和附属上单词的注释信息。</li></ul><h3 id="索引元素"><a href="#索引元素" class="headerlink" title="索引元素"></a>索引元素</h3><p><img src="https://img.itcode.net.cn/blog/202308142252694.png" alt="image-20230814225235634"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;String&gt; searchPrefix(String prefix) &#123;</span><br><span class="line">    TrieNode root = wordsTree;</span><br><span class="line">    char[] chars = prefix.toCharArray();</span><br><span class="line">    StringBuilder cache = new StringBuilder();</span><br><span class="line">    // 精准匹配：根据前置精准查找</span><br><span class="line">    for (char c : chars) &#123;</span><br><span class="line">        int idx = c - &#x27;a&#x27;;</span><br><span class="line">        // 匹配为空</span><br><span class="line">        if (idx &gt; root.slot.length || idx &lt; 0 || root.slot[idx] == null) &#123;</span><br><span class="line">            return Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        cache.append(c);</span><br><span class="line">        root = root.slot[idx];</span><br><span class="line">    &#125;</span><br><span class="line">    // 模糊匹配：根据前缀的最后一个单词，递归遍历所有的单词</span><br><span class="line">    ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">    if (root.prefix != 0) &#123;</span><br><span class="line">        for (int i = 0; i &lt; root.slot.length; i++) &#123;</span><br><span class="line">            if (root.slot[i] != null) &#123;</span><br><span class="line">                char c = (char) (i + &#x27;a&#x27;);</span><br><span class="line">                collect(root.slot[i], String.valueOf(cache) + c, list, 15);</span><br><span class="line">                if (list.size() &gt;= 15) &#123;</span><br><span class="line">                    return list;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void collect(TrieNode trieNode, String pre, List&lt;String&gt; queue, int resultLimit) &#123;</span><br><span class="line">    // 找到单词</span><br><span class="line">    if (trieNode.isWord) &#123;</span><br><span class="line">        trieNode.word = pre;</span><br><span class="line">        // 保存检索到的单词到 queue</span><br><span class="line">        queue.add(trieNode.word + &quot; -&gt; &quot; + trieNode.explain);</span><br><span class="line">        if (queue.size() &gt;= resultLimit) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 递归调用，查找单词</span><br><span class="line">    for (int i = 0; i &lt; trieNode.slot.length; i++) &#123;</span><br><span class="line">        char c = (char) (&#x27;a&#x27; + i);</span><br><span class="line">        if (trieNode.slot[i] != null) &#123;</span><br><span class="line">            collect(trieNode.slot[i], pre + c, queue, resultLimit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>从字典树从检索元素的过程分为2部分，第1部分是根据提供的索引前缀精准匹配到单词信息，第2部分是根据索引前缀的最后一个单词开始，循环递归遍历从当前位置所能关联到的字母直至判断为是单词标记为结束，通过这样的方式把所有匹配动的单词索引出来。</li><li>list.size() &gt;&#x3D; 15 是判定索引的最大长度，超过这个数量就停止索引了，毕竟这是一种O(n)时间复杂度的操作，如果加载数十万单词进行匹配，执行速度还是比较耗时的。</li></ul><h3 id="字典树功能测试"><a href="#字典树功能测试" class="headerlink" title="字典树功能测试"></a>字典树功能测试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test_trie() &#123;</span><br><span class="line">    Trie trie = new Trie();</span><br><span class="line">    // 存入</span><br><span class="line">    trie.insert(&quot;bat&quot;,&quot;大厂&quot;);</span><br><span class="line">    trie.insert(&quot;batch&quot;, &quot;批量&quot;);</span><br><span class="line">    trie.insert(&quot;bitch&quot;, &quot;彪子&quot;);</span><br><span class="line">    trie.insert(&quot;battle&quot;, &quot;战斗&quot;);</span><br><span class="line">    logger.info(trie.toString());</span><br><span class="line">    // 检索</span><br><span class="line">    List&lt;String&gt; trieNodes = trie.searchPrefix(&quot;ba&quot;);</span><br><span class="line">    logger.info(&quot;测试结果：&#123;&#125;&quot;, JSON.toJSONString(trieNodes));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>这里提供一些有相近字母的单词和名词，用于测试。你也可以尝试读取txt文件，检索存入数十万单词进行检索验证。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 测试结果</span><br><span class="line">[main] INFO trie.__test__.TrieTest - 测试结果：[&quot;bat -&gt; 大厂&quot;,&quot;batch -&gt; 批量&quot;,&quot;battle -&gt; 战斗&quot;]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ul><li>通过测试结果可以看到，把所有以 <strong>ba</strong> 开头的单词全部检索出来了。这也是字典树最核心功能的体现。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;字典树数据结构&quot;&gt;&lt;a href=&quot;#字典树数据结构&quot; class=&quot;headerlink&quot; title=&quot;字典树数据结构&quot;&gt;&lt;/a&gt;字典树数据结构&lt;/h2&gt;&lt;p&gt;是一种搜索树，一种已排序的数据结构，通常用于存储动态集或键为字符串的关联数组。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.itcode.net.cn/blog/202308142249820.png&quot; alt=&quot;image-20230814224935665&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一个把 battle 单词字符串，按照字母拆分到字典树进行存放的图。&lt;/li&gt;
&lt;li&gt;键标注在节点中，值标注在节点之下。每一个完整的英文单词对应一个特定的整数。也就是26个字母对应的 ASCII 转换后的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;p&gt;字典树字母的存放有26个，也就是说在实现的过程中，每一个节点的分支都有26个槽位用来存放可能出现的字母组合。同理如果是数字树的话就是10个数字的组合，每个字典树上的节点对应的分支则有10个操作存放可能出现组合的数字。&lt;/p&gt;
&lt;h3 id=&quot;树枝节点&quot;&gt;&lt;a href=&quot;#树枝节点&quot; class=&quot;headerlink&quot; title=&quot;树枝节点&quot;&gt;&lt;/a&gt;树枝节点&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TrieNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /** 形成一个链 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public TrieNode[] slot = new TrieNode[26];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /** 字母 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public char c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /** 单词：数量 &amp;gt; 0 表示一个单词 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public boolean isWord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /** 前缀 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public int prefix;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /** 单词：具体的一个单词字符串 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String word;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /** 解释：单词的注释说明 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String explain;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;字典的树的节点需要包括此节点内嵌的关联节点，之后是节点的字母、到此字母是否为单词、单词的前缀、单词字符串和当前单词的非必要注释。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;插入元素&quot;&gt;&lt;a href=&quot;#插入元素&quot; class=&quot;headerlink&quot; title=&quot;插入元素&quot;&gt;&lt;/a&gt;插入元素&lt;/h3&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.itcode.net.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="algorithms" scheme="https://www.itcode.net.cn/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>堆栈</title>
    <link href="https://www.itcode.net.cn/posts/af55460a/"/>
    <id>https://www.itcode.net.cn/posts/af55460a/</id>
    <published>2023-08-13T11:08:29.000Z</published>
    <updated>2023-08-13T14:02:12.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="堆栈数据结构"><a href="#堆栈数据结构" class="headerlink" title="堆栈数据结构"></a>堆栈数据结构</h2><ul><li>先进先出<ul><li>数据压栈，通过与运算得到索引值。当发生空间不足时扩容迁移数据，有两次操作，前半段复制与后半段复制。</li><li>数据弹出时，按照空间元素数量总数开始，同样计算索引值。分为弹出队列中未发生迁移的数据和已经完全迁移好的数据。凡是迁移的数据，都是保证了一个顺序。</li></ul></li><li>以2的次幂进行初始化，扩容为2的倍数（保证计算元素索引位置时，可以进行运算）。</li></ul><p><img src="https://img.itcode.net.cn/blog/202308132158443.png" alt="image-20230813215836738"></p><p><img src="https://img.itcode.net.cn/blog/202308132200543.png" alt="image-20230813220023947"></p><h3 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h3><ul><li>添加元素 ArrayDeque#push</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void push(E e) &#123;</span><br><span class="line">    if (e == null)</span><br><span class="line">        throw new NullPointerException();</span><br><span class="line">    elements[head = (head - 1) &amp; (elements.length - 1)] = e;</span><br><span class="line">    logger.info(&quot;push.idx head：&#123;&#125;&quot;, head);</span><br><span class="line">    if (head == tail)</span><br><span class="line">        doubleCapacity();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//push 元素的过程相当于找到初始化数组长度的队尾，另外是扩容后从新的队尾开始依次添加元素。此时不用担心元素的输出，因为输出时是从扩容起始点开始输出元素。</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="https://img.itcode.net.cn/blog/202308132201312.png" alt="image-20230813220101862"></p><ul><li>扩容空间 ArrayDeque#doubleCapacity</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">private void doubleCapacity() &#123;</span><br><span class="line">    assert head == tail;</span><br><span class="line">    int p = head;</span><br><span class="line">    int n = elements.length;</span><br><span class="line">    int r = n - p;</span><br><span class="line">    int newCapacity = n &lt;&lt; 1;</span><br><span class="line">    if (newCapacity &lt; 0)</span><br><span class="line">        throw new IllegalStateException(&quot;Sorry, deque too big&quot;);</span><br><span class="line">    Object[] a = new Object[newCapacity];</span><br><span class="line">    /*</span><br><span class="line">     * src      - 源数组</span><br><span class="line">     * srcPos   – 源数组中的起始位置</span><br><span class="line">     * dest     - 目标数组</span><br><span class="line">     * destPos  – 目标数据中的起始位置</span><br><span class="line">     * length   – 要复制的数组元素的数量</span><br><span class="line">     */</span><br><span class="line">    // 第一次拷贝元素：[2、1、4、3] 将数组中的扩容后一半元素拷贝到新数组0开始往后的位置。拷贝4、3</span><br><span class="line">    System.arraycopy(elements, p, a, 0, r);</span><br><span class="line">    // 第二次拷贝元素：[2、1、4、3] 将数组中的前面一半数量的元素，拷贝到新数组后一半开始的位置往后。拷贝2、1</span><br><span class="line">    System.arraycopy(elements, 0, a, r, p);</span><br><span class="line">    elements = a;</span><br><span class="line">    head = 0;</span><br><span class="line">    tail = n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>空间扩容以2的倍数进行操作，以此保证2的幂等。</li><li>System.arraycopy 是操作数据迁移的本地方法，从源数组的某个指定位置，把元素迁移到新数组的指定位置和指定个数个元素。</li><li>另外是数据迁移，以 [2、1、4、3] 举例；<ul><li>第一次拷贝元素：[2、1、4、3] 将数组中的扩容后一半元素拷贝到新数组0开始往后的位置。拷贝4、3</li><li>第二次拷贝元素：[2、1、4、3] 将数组中的前面一半数量的元素，拷贝到新数组后一半开始的位置往后。拷贝2、1</li></ul></li></ul><p><img src="https://img.itcode.net.cn/blog/202308132201594.png" alt="image-20230813220132550"></p><ul><li>弹出元素 ArrayDeque#pop</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public E pop() &#123;</span><br><span class="line">    int h = head;</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    E result = (E) elements[h];</span><br><span class="line">    if (result == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    elements[h] = null;</span><br><span class="line">    head = (h + 1) &amp; (elements.length - 1);</span><br><span class="line">    logger.info(&quot;pop.idx &#123;&#125; = &#123;&#125; &amp; &#123;&#125;&quot;, head, Integer.toBinaryString(h + 1), Integer.toBinaryString(elements.length - 1));</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>按照索引的计算，以此是弹出索引为：6、7、0、1、2、3、4 对应的元素。head 的值从扩容的长度添加元素后逐步减小，所以当前最开始弹出的元素是6索引对应的值。</li></ul><p><img src="https://img.itcode.net.cn/blog/202308132201450.png" alt="image-20230813220155788"></p><ul><li>测试代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test_stack() &#123;</span><br><span class="line">    Deque&lt;Integer&gt; deque = new ArrayDeque&lt;&gt;();</span><br><span class="line">    deque.push(1);</span><br><span class="line">    deque.push(2);</span><br><span class="line">    deque.push(3);</span><br><span class="line">    deque.push(4);</span><br><span class="line">    deque.push(5);</span><br><span class="line">    deque.push(6);</span><br><span class="line">    deque.push(7);</span><br><span class="line">    </span><br><span class="line">    logger.info(&quot;弹出元素：&#123;&#125;&quot;, deque.pop());</span><br><span class="line">    logger.info(&quot;弹出元素：&#123;&#125;&quot;, deque.pop());</span><br><span class="line">    logger.info(&quot;弹出元素：&#123;&#125;&quot;, deque.pop());</span><br><span class="line">    logger.info(&quot;弹出元素：&#123;&#125;&quot;, deque.pop());</span><br><span class="line">    logger.info(&quot;弹出元素：&#123;&#125;&quot;, deque.pop());</span><br><span class="line">    logger.info(&quot;弹出元素：&#123;&#125;&quot;, deque.pop());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;堆栈数据结构&quot;&gt;&lt;a href=&quot;#堆栈数据结构&quot; class=&quot;headerlink&quot; title=&quot;堆栈数据结构&quot;&gt;&lt;/a&gt;堆栈数据结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;先进先出&lt;ul&gt;
&lt;li&gt;数据压栈，通过与运算得到索引值。当发生空间不足时扩容迁移数据，有两次操作，前半段复制与后半段复制。&lt;/li&gt;
&lt;li&gt;数据弹出时，按照空间元素数量总数开始，同样计算索引值。分为弹出队列中未发生迁移的数据和已经完全迁移好的数据。凡是迁移的数据，都是保证了一个顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以2的次幂进行初始化，扩容为2的倍数（保证计算元素索引位置时，可以进行运算）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://img.itcode.net.cn/blog/202308132158443.png&quot; alt=&quot;image-20230813215836738&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.itcode.net.cn/blog/202308132200543.png&quot; alt=&quot;image-20230813220023947&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;源码实现&quot;&gt;&lt;a href=&quot;#源码实现&quot; class=&quot;headerlink&quot; title=&quot;源码实现&quot;&gt;&lt;/a&gt;源码实现&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;添加元素 ArrayDeque#push&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public void push(E e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (e == null)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throw new NullPointerException();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    elements[head = (head - 1) &amp;amp; (elements.length - 1)] = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger.info(&amp;quot;push.idx head：&amp;#123;&amp;#125;&amp;quot;, head);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (head == tail)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doubleCapacity();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//push 元素的过程相当于找到初始化数组长度的队尾，另外是扩容后从新的队尾开始依次添加元素。此时不用担心元素的输出，因为输出时是从扩容起始点开始输出元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://img.itcode.net.cn/blog/202308132201312.png&quot; alt=&quot;image-20230813220101862&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩容空间 ArrayDeque#doubleCapacity&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private void doubleCapacity() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert head == tail;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int n = elements.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int r = n - p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int newCapacity = n &amp;lt;&amp;lt; 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (newCapacity &amp;lt; 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throw new IllegalStateException(&amp;quot;Sorry, deque too big&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Object[] a = new Object[newCapacity];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * src      - 源数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * srcPos   – 源数组中的起始位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * dest     - 目标数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * destPos  – 目标数据中的起始位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * length   – 要复制的数组元素的数量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 第一次拷贝元素：[2、1、4、3] 将数组中的扩容后一半元素拷贝到新数组0开始往后的位置。拷贝4、3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.arraycopy(elements, p, a, 0, r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 第二次拷贝元素：[2、1、4、3] 将数组中的前面一半数量的元素，拷贝到新数组后一半开始的位置往后。拷贝2、1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.arraycopy(elements, 0, a, r, p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    elements = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tail = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.itcode.net.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="algorithms" scheme="https://www.itcode.net.cn/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>延迟队列</title>
    <link href="https://www.itcode.net.cn/posts/c41f8085/"/>
    <id>https://www.itcode.net.cn/posts/c41f8085/</id>
    <published>2023-08-11T13:34:32.000Z</published>
    <updated>2023-08-11T15:24:21.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="延迟队列说明及实现原理"><a href="#延迟队列说明及实现原理" class="headerlink" title="延迟队列说明及实现原理"></a>延迟队列说明及实现原理</h2><ul><li>是一个无阻塞队列（BlockingQueue）</li><li>使用完全二叉堆结构</li><li>添加元素时，延迟最小的元素放在队首</li></ul><p><img src="https://img.itcode.net.cn/blog/202308112155452.png" alt="image-20230811215548434"></p><h3 id="二叉堆结构"><a href="#二叉堆结构" class="headerlink" title="二叉堆结构"></a>二叉堆结构</h3><p>是一种完整或近似二叉树的结构，下文以PriorityQueue实现平衡二叉堆结构，数据以队列形式存储。其父子节点关系如下：</p><ul><li>父子节点索引关系<ul><li>父节点为queue[n]，左子节点则为queue[2n+1]，右子节点为queue[2n+2]</li><li>任意子节点的父节点位置都是(n-1)&gt;&gt;&gt;1，相当于减1后除2取整</li></ul></li><li>节点间大小关系<ul><li>父节点小于等于任意子节点</li><li>同一层的两个子节点大小不需要维护，仅需在弹出元素时候进行判断</li></ul></li><li>子叶节点与非子叶节点<ul><li>一个长度为size的优先队列，当index &gt;&#x3D; size &gt;&gt;&gt; 1时，该节点为叶子节点，否则为非叶子节点</li></ul></li></ul><h4 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h4><p><img src="https://img.itcode.net.cn/blog/202308112215882.png" alt="image-20230811221525281"></p><h4 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h4><p><img src="https://img.itcode.net.cn/blog/202308112216557.png" alt="image-20230811221615428"></p><h2 id="延迟队列的实现"><a href="#延迟队列的实现" class="headerlink" title="延迟队列的实现"></a>延迟队列的实现</h2><ul><li>Queue 单端队列接口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface Queue&lt;E&gt; &#123;</span><br><span class="line">    boolean add(E e);</span><br><span class="line"></span><br><span class="line">    boolean offer(E e);</span><br><span class="line"></span><br><span class="line">    E poll();</span><br><span class="line"></span><br><span class="line">    E peek();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Deque 双端队列</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface Deque&lt;E&gt; extends Queue&lt;E&gt; &#123;</span><br><span class="line">    void addFirst(E e);</span><br><span class="line"></span><br><span class="line">    void addLast(E e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BlockingQueue 阻塞队列接口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface BlockingQueue&lt;E&gt; extends Queue&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Delayed 延迟队列接口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Delayed extends Comparable&lt;Delayed&gt;&#123;</span><br><span class="line">    long getDelay(TimeUnit unit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>PriorityQueue 优先队列</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">public class PriorityQueue&lt;E&gt; implements Queue&lt;E&gt; &#123;</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(PriorityQueue.class);</span><br><span class="line"></span><br><span class="line">    private static final int DEFAULT_INITIAL_CAPACITY = 11;</span><br><span class="line"></span><br><span class="line">    transient Object[] queue;</span><br><span class="line"></span><br><span class="line">    private int size = 0;</span><br><span class="line"></span><br><span class="line">    public PriorityQueue() &#123;</span><br><span class="line">        queue = new Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean offer(E e) &#123;</span><br><span class="line">        if (e == null) &#123;</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line">        int i = size;</span><br><span class="line">        if (i &gt;= queue.length) &#123;</span><br><span class="line">            grow(i + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        size = i + 1;</span><br><span class="line">        if (i == 0) &#123;</span><br><span class="line">            queue[0] = e;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            siftUp(i, e);</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void grow(int minCapacity) &#123;</span><br><span class="line">        int oldCapacity = queue.length;</span><br><span class="line">        // Double size if small; else grow by 50%</span><br><span class="line">        int newCapacity = oldCapacity + ((oldCapacity &lt; 64) ?</span><br><span class="line">                (oldCapacity + 2) :</span><br><span class="line">                (oldCapacity &gt;&gt; 1));</span><br><span class="line">        // overflow-conscious code</span><br><span class="line">        if (newCapacity - (Integer.MAX_VALUE - 8) &gt; 0) &#123;</span><br><span class="line">            newCapacity = (minCapacity &gt; Integer.MAX_VALUE - 8) ?</span><br><span class="line">                    Integer.MAX_VALUE :</span><br><span class="line">                    Integer.MAX_VALUE - 8;</span><br><span class="line">        &#125;</span><br><span class="line">        queue = Arrays.copyOf(queue, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void siftUp(int k, E x) &#123;</span><br><span class="line">        siftUpComparable(k, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    private void siftUpComparable(int k, E x) &#123;</span><br><span class="line">        Comparable&lt;? super E&gt; key = (Comparable&lt;? super E&gt;) x;</span><br><span class="line">        logger.info(&quot;【入队】元素：&#123;&#125; 当前队列：&#123;&#125;&quot;, JSON.toJSONString(key), JSON.toJSONString(queue));</span><br><span class="line">        while (k &gt; 0) &#123;</span><br><span class="line">            // 获取父节点Idx，相当于除以2</span><br><span class="line">            int parent = (k - 1) &gt;&gt;&gt; 1;</span><br><span class="line">            logger.info(&quot;【入队】寻找当前节点的父节点位置。k：&#123;&#125; parent：&#123;&#125;&quot;, k, parent);</span><br><span class="line">            Object e = queue[parent];</span><br><span class="line">            // 如果当前位置元素，大于父节点元素，则退出循环</span><br><span class="line">            if (key.compareTo((E) e) &gt;= 0) &#123;</span><br><span class="line">                logger.info(&quot;【入队】值比对，父节点：&#123;&#125; 目标节点：&#123;&#125;&quot;, JSON.toJSONString(e), JSON.toJSONString(key));</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            // 相反父节点位置大于当前位置元素，则进行替换</span><br><span class="line">            logger.info(&quot;【入队】替换过程，父子节点位置替换，继续循环。父节点值：&#123;&#125; 存放到位置：&#123;&#125;&quot;, JSON.toJSONString(e), k);</span><br><span class="line">            queue[k] = e;</span><br><span class="line">            k = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        queue[k] = key;</span><br><span class="line">        logger.info(&quot;【入队】完成 Idx：&#123;&#125; Val：&#123;&#125; \r\n当前队列：&#123;&#125; \r\n&quot;, k, JSON.toJSONString(key), JSON.toJSONString(queue));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean add(E e) &#123;</span><br><span class="line">        return offer(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    @Override</span><br><span class="line">    public E poll() &#123;</span><br><span class="line">        if (size == 0) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int s = --size;</span><br><span class="line">        E result = (E) queue[0];</span><br><span class="line">        E x = (E) queue[s];</span><br><span class="line">        queue[s] = null;</span><br><span class="line">        if (s != 0) &#123;</span><br><span class="line">            siftDown(0, x);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void siftDown(int k, E x) &#123;</span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    private void siftDownComparable(int k, E x) &#123;</span><br><span class="line">        Comparable&lt;? super E&gt; key = (Comparable&lt;? super E&gt;) x;</span><br><span class="line">        // 先找出中间件节点</span><br><span class="line">        int half = size &gt;&gt;&gt; 1;</span><br><span class="line">        while (k &lt; half) &#123;</span><br><span class="line">            // 找到左子节点和右子节点，两个节点进行比较，找出最大的值</span><br><span class="line">            int child = (k &lt;&lt; 1) + 1;</span><br><span class="line">            Object c = queue[child];</span><br><span class="line">            int right = child + 1;</span><br><span class="line">            // 左子节点与右子节点比较，取最小的节点</span><br><span class="line">            if (right &lt; size &amp;&amp; ((Comparable&lt;? super E&gt;) c).compareTo((E) queue[right]) &gt; 0) &#123;</span><br><span class="line">                logger.info(&quot;【出队】左右子节点比对，获取最小值。left：&#123;&#125; right：&#123;&#125;&quot;, JSON.toJSONString(c), JSON.toJSONString(queue[right]));</span><br><span class="line">                c = queue[child = right];</span><br><span class="line">            &#125;</span><br><span class="line">            // 目标值与c比较，当目标值小于c值，退出循环。说明此时目标值所在位置适合，迁移完成。</span><br><span class="line">            if (key.compareTo((E) c) &lt;= 0) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            // 目标值小于c值，位置替换，继续比较</span><br><span class="line">            logger.info(&quot;【出队】替换过程，节点的值比对。上节点：&#123;&#125; 下节点：&#123;&#125; 位置替换&quot;, JSON.toJSONString(queue[k]), JSON.toJSONString(c));</span><br><span class="line">            queue[k] = c;</span><br><span class="line">            k = child;</span><br><span class="line">        &#125;</span><br><span class="line">        // 把目标值放到对应位置</span><br><span class="line">        logger.info(&quot;【出队】替换结果，最终更换位置。Idx：&#123;&#125; Val：&#123;&#125;&quot;, k, JSON.toJSONString(key));</span><br><span class="line">        queue[k] = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    @Override</span><br><span class="line">    public E peek() &#123;</span><br><span class="line">        return (size == 0) ? null : (E) queue[0];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>DelayQueue 延迟队列</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class DelayQueue&lt;E  extends Delayed&gt; implements BlockingQueue&lt;E&gt;&#123;</span><br><span class="line">    private final transient ReentrantLock lock = new ReentrantLock();</span><br><span class="line">    private final PriorityQueue&lt;E&gt; q = new PriorityQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    private final Condition available = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean add(E e) &#123;</span><br><span class="line">        return offer(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean offer(E e) &#123;</span><br><span class="line">        final ReentrantLock lock = this.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            q.offer(e);</span><br><span class="line">            if (q.peek() == e) &#123;</span><br><span class="line">                available.signal();</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public E poll() &#123;</span><br><span class="line">        final ReentrantLock lock = this.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            E first = q.peek();</span><br><span class="line">            if (first == null || first.getDelay(NANOSECONDS) &gt; 0) &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return q.poll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public E peek() &#123;</span><br><span class="line">        final ReentrantLock lock = this.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            return q.peek();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试代码 QueueTest</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public class QueueTest &#123;</span><br><span class="line">    private final Logger logger = LoggerFactory.getLogger(QueueTest.class);</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test_queue() throws InterruptedException &#123;</span><br><span class="line">        Queue&lt;Job&gt; queue = new DelayQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queue.add(new Job(&quot;1号&quot;, 1000L));</span><br><span class="line">        queue.add(new Job(&quot;3号&quot;, 3000L));</span><br><span class="line">        queue.add(new Job(&quot;5号&quot;, 5000L));</span><br><span class="line">        queue.add(new Job(&quot;11号&quot;, 11000L));</span><br><span class="line">        queue.add(new Job(&quot;4号&quot;, 4000L));</span><br><span class="line">        queue.add(new Job(&quot;6号&quot;, 6000L));</span><br><span class="line">        queue.add(new Job(&quot;7号&quot;, 7000L));</span><br><span class="line">        queue.add(new Job(&quot;12号&quot;, 12000L));</span><br><span class="line">        queue.add(new Job(&quot;15号&quot;, 15000L));</span><br><span class="line">        queue.add(new Job(&quot;10号&quot;, 10000L));</span><br><span class="line">        queue.add(new Job(&quot;9号&quot;, 9000L));</span><br><span class="line">        queue.add(new Job(&quot;8号&quot;, 8000L));</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line">            Job poll = queue.poll();</span><br><span class="line">            if (null == poll) &#123;</span><br><span class="line">                Thread.sleep(10);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(poll.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Job implements Delayed &#123;</span><br><span class="line"></span><br><span class="line">        private final String name;</span><br><span class="line">        private final Long begin;</span><br><span class="line">        private final Long delayTime;</span><br><span class="line"></span><br><span class="line">        public Job(String name, Long delayTime) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.begin = System.currentTimeMillis();</span><br><span class="line">            this.delayTime = delayTime;//延时时长</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public long getDelay(TimeUnit unit) &#123;</span><br><span class="line">            return unit.convert(begin + delayTime - System.currentTimeMillis(), TimeUnit.MICROSECONDS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int compareTo(Delayed o) &#123;</span><br><span class="line">            Job job = (Job) o;</span><br><span class="line">            return (int) (this.getDelay(TimeUnit.MICROSECONDS) - job.getDelay(TimeUnit.MICROSECONDS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;延迟队列说明及实现原理&quot;&gt;&lt;a href=&quot;#延迟队列说明及实现原理&quot; class=&quot;headerlink&quot; title=&quot;延迟队列说明及实现原理&quot;&gt;&lt;/a&gt;延迟队列说明及实现原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;是一个无阻塞队列（BlockingQueue）&lt;/li&gt;
&lt;li&gt;使用完全二叉堆结构&lt;/li&gt;
&lt;li&gt;添加元素时，延迟最小的元素放在队首&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://img.itcode.net.cn/blog/202308112155452.png&quot; alt=&quot;image-20230811215548434&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;二叉堆结构&quot;&gt;&lt;a href=&quot;#二叉堆结构&quot; class=&quot;headerlink&quot; title=&quot;二叉堆结构&quot;&gt;&lt;/a&gt;二叉堆结构&lt;/h3&gt;&lt;p&gt;是一种完整或近似二叉树的结构，下文以PriorityQueue实现平衡二叉堆结构，数据以队列形式存储。其父子节点关系如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父子节点索引关系&lt;ul&gt;
&lt;li&gt;父节点为queue[n]，左子节点则为queue[2n+1]，右子节点为queue[2n+2]&lt;/li&gt;
&lt;li&gt;任意子节点的父节点位置都是(n-1)&amp;gt;&amp;gt;&amp;gt;1，相当于减1后除2取整&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;节点间大小关系&lt;ul&gt;
&lt;li&gt;父节点小于等于任意子节点&lt;/li&gt;
&lt;li&gt;同一层的两个子节点大小不需要维护，仅需在弹出元素时候进行判断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子叶节点与非子叶节点&lt;ul&gt;
&lt;li&gt;一个长度为size的优先队列，当index &amp;gt;&amp;#x3D; size &amp;gt;&amp;gt;&amp;gt; 1时，该节点为叶子节点，否则为非叶子节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;入队&quot;&gt;&lt;a href=&quot;#入队&quot; class=&quot;headerlink&quot; title=&quot;入队&quot;&gt;&lt;/a&gt;入队&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://img.itcode.net.cn/blog/202308112215882.png&quot; alt=&quot;image-20230811221525281&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;出队&quot;&gt;&lt;a href=&quot;#出队&quot; class=&quot;headerlink&quot; title=&quot;出队&quot;&gt;&lt;/a&gt;出队&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://img.itcode.net.cn/blog/202308112216557.png&quot; alt=&quot;image-20230811221615428&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.itcode.net.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="algorithms" scheme="https://www.itcode.net.cn/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>手撕Mybatis--实现简单Mybatis框架</title>
    <link href="https://www.itcode.net.cn/posts/35f33c4c/"/>
    <id>https://www.itcode.net.cn/posts/35f33c4c/</id>
    <published>2023-08-10T15:13:29.000Z</published>
    <updated>2023-08-11T16:00:10.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传统JDBC问题解决思路"><a href="#传统JDBC问题解决思路" class="headerlink" title="传统JDBC问题解决思路"></a>传统JDBC问题解决思路</h2><ol><li>使⽤数据库连接池初始化连接资源。</li><li>将sql语句抽取到xml配置⽂件中。</li><li>使⽤反射、内省等底层技术，⾃动将实体与表进⾏属性与字段的⾃动映射。</li></ol><h2 id="自定义框架设计"><a href="#自定义框架设计" class="headerlink" title="自定义框架设计"></a>自定义框架设计</h2><ul><li><p>使用端</p><ul><li>核⼼配置⽂件sqlMapConfig.xml：存放数据源信息。</li><li>引⼊mapper.xml：sql语句的配置⽂件信息</li></ul></li><li><p>框架端</p><ul><li><p>读取配置⽂件，以流的形式存在，创建javaBean来存储</p><ul><li>Configuration : 存放数据库基本信息、Map&lt;唯⼀标识，Mapper&gt; 唯⼀标识：namespace + “.”+ id</li><li>MappedStatement：sql语句、statement类型、输⼊参数java类型、输出参数java类型</li></ul></li><li><p>解析配置⽂件</p><ul><li>创建sqlSessionFactoryBuilder类，⽅法：sqlSessionFactory.build()</li><li>使⽤dom4j解析配置⽂件，将解析出来的内容封装到Configuration和MappedStatement中。<ul><li>创建SqlSessionFactory的实现类DefaultSqlSession</li></ul></li></ul></li><li><p>创建SqlSessionFactory</p><ul><li>openSession() : 获取sqlSession接⼝的实现类实例对象</li></ul></li><li><p>创建sqlSession接⼝及实现类：主要封装crud⽅法</p><ul><li>selectList(String statementId,Object param)：查询所有。</li><li>selectOne(String statementId,Object param)：查询单个。</li></ul></li></ul></li><li><p>涉及到的设计模式</p><ul><li>Builder构建者设计模式</li><li>⼯⼚模式</li><li>代理模式</li></ul></li></ul><h2 id="自定义框架的实现"><a href="#自定义框架的实现" class="headerlink" title="自定义框架的实现"></a>自定义框架的实现</h2><p>创建sqlMapConfig.xml</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;传统JDBC问题解决思路&quot;&gt;&lt;a href=&quot;#传统JDBC问题解决思路&quot; class=&quot;headerlink&quot; title=&quot;传统JDBC问题解决思路&quot;&gt;&lt;/a&gt;传统JDBC问题解决思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使⽤数据库连接池初始化连接资源。&lt;/li&gt;
&lt;li&gt;将sql语句抽取到xml配置⽂件中。&lt;/li&gt;
&lt;li&gt;使⽤反射、内省等底层技术，⾃动将实体与表进⾏属性与字段的⾃动映射。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;自定义框架设计&quot;&gt;&lt;a href=&quot;#自定义框架设计&quot; class=&quot;headerlink&quot; title=&quot;自定义框架设计&quot;&gt;&lt;/a&gt;自定义框架设计&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核⼼配置⽂件sqlMapConfig.xml：存放数据源信息。&lt;/li&gt;
&lt;li&gt;引⼊mapper.xml：sql语句的配置⽂件信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;框架端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;读取配置⽂件，以流的形式存在，创建javaBean来存储&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configuration : 存放数据库基本信息、Map&amp;lt;唯⼀标识，Mapper&amp;gt; 唯⼀标识：namespace + “.”+ id&lt;/li&gt;
&lt;li&gt;MappedStatement：sql语句、statement类型、输⼊参数java类型、输出参数java类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解析配置⽂件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建sqlSessionFactoryBuilder类，⽅法：sqlSessionFactory.build()&lt;/li&gt;
&lt;li&gt;使⽤dom4j解析配置⽂件，将解析出来的内容封装到Configuration和MappedStatement中。&lt;ul&gt;
&lt;li&gt;创建SqlSessionFactory的实现类DefaultSqlSession&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建SqlSessionFactory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;openSession() : 获取sqlSession接⼝的实现类实例对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建sqlSession接⼝及实现类：主要封装crud⽅法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;selectList(String statementId,Object param)：查询所有。&lt;/li&gt;
&lt;li&gt;selectOne(String statementId,Object param)：查询单个。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;涉及到的设计模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Builder构建者设计模式&lt;/li&gt;
&lt;li&gt;⼯⼚模式&lt;/li&gt;
&lt;li&gt;代理模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;自定义框架的实现&quot;&gt;&lt;a href=&quot;#自定义框架的实现&quot; class=&quot;headerlink&quot; title=&quot;自定义框架的实现&quot;&gt;&lt;/a&gt;自定义框架的实现&lt;/h2&gt;&lt;p&gt;创建sqlMapConfig.xml&lt;/p&gt;
</summary>
    
    
    
    <category term="源码分析" scheme="https://www.itcode.net.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Mybatis" scheme="https://www.itcode.net.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>手撕Mybatis--分析JDBC操作问题</title>
    <link href="https://www.itcode.net.cn/posts/349665f2/"/>
    <id>https://www.itcode.net.cn/posts/349665f2/</id>
    <published>2023-08-10T14:52:20.000Z</published>
    <updated>2023-08-11T15:55:10.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析原始JDBC"><a href="#分析原始JDBC" class="headerlink" title="分析原始JDBC"></a>分析原始JDBC</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        PreparedStatement preparedStatement = null;</span><br><span class="line">        ResultSet resultSet = null;</span><br><span class="line">        try &#123;</span><br><span class="line">// 加载数据库驱动</span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">// 通过驱动管理类获取数据库链接</span><br><span class="line">            connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding = utf-8&quot;, &quot; root&quot;, &quot;root&quot;);</span><br><span class="line">// 定义sql语句？表示占位符</span><br><span class="line">            String sql = &quot;select * from user where username = ?&quot;;</span><br><span class="line">// 获取预处理statement</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">// 设置参数，第⼀个参数为sql语句中参数的序号(从1开始)，第⼆个参数为设置的参数值</span><br><span class="line">            preparedStatement.setString(1, &quot;tom&quot;);</span><br><span class="line">// 向数据库发出sql执⾏查询，查询出结果集</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">// 遍历查询结果集</span><br><span class="line">            while (resultSet.next()) &#123;</span><br><span class="line">                int id = resultSet.getInt(&quot;id&quot;);</span><br><span class="line">                String username = resultSet.getString(&quot;username&quot;);</span><br><span class="line">// 封装User</span><br><span class="line">//                user.setId(id);</span><br><span class="line">//                user.setUsername(username);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">// 释放资源</span><br><span class="line">            if (resultSet != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (preparedStatement != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    preparedStatement.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (connection != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC问题总结"><a href="#JDBC问题总结" class="headerlink" title="JDBC问题总结"></a>JDBC问题总结</h2><ol><li>数据库连接创建、释放频繁造成系统资源浪费，影响系统性能。</li><li>Sql语句在代码中硬编码。</li><li>使⽤preparedStatement向占有位符号传参数存在硬编码。</li><li>对结果集解析存在硬编码(查询列名)，sql变化导致解析代码变化。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;分析原始JDBC&quot;&gt;&lt;a href=&quot;#分析原始JDBC&quot; class=&quot;headerlink&quot; title=&quot;分析原始JDBC&quot;&gt;&lt;/a&gt;分析原始JDBC&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Connection connection = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PreparedStatement preparedStatement = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ResultSet resultSet = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 加载数据库驱动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Class.forName(&amp;quot;com.mysql.jdbc.Driver&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 通过驱动管理类获取数据库链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            connection = DriverManager.getConnection(&amp;quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding = utf-8&amp;quot;, &amp;quot; root&amp;quot;, &amp;quot;root&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 定义sql语句？表示占位符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String sql = &amp;quot;select * from user where username = ?&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取预处理statement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            preparedStatement = connection.prepareStatement(sql);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置参数，第⼀个参数为sql语句中参数的序号(从1开始)，第⼆个参数为设置的参数值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            preparedStatement.setString(1, &amp;quot;tom&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 向数据库发出sql执⾏查询，查询出结果集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resultSet = preparedStatement.executeQuery();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 遍历查询结果集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            while (resultSet.next()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                int id = resultSet.getInt(&amp;quot;id&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                String username = resultSet.getString(&amp;quot;username&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 封装User&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//                user.setId(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//                user.setUsername(username);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 释放资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (resultSet != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    resultSet.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; catch (SQLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (preparedStatement != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    preparedStatement.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; catch (SQLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (connection != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    connection.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; catch (SQLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;JDBC问题总结&quot;&gt;&lt;a href=&quot;#JDBC问题总结&quot; class=&quot;headerlink&quot; title=&quot;JDBC问题总结&quot;&gt;&lt;/a&gt;JDBC问题总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;数据库连接创建、释放频繁造成系统资源浪费，影响系统性能。&lt;/li&gt;
&lt;li&gt;Sql语句在代码中硬编码。&lt;/li&gt;
&lt;li&gt;使⽤preparedStatement向占有位符号传参数存在硬编码。&lt;/li&gt;
&lt;li&gt;对结果集解析存在硬编码(查询列名)，sql变化导致解析代码变化。&lt;/li&gt;
&lt;/ol&gt;
</summary>
    
    
    
    <category term="源码分析" scheme="https://www.itcode.net.cn/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Mybatis" scheme="https://www.itcode.net.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://www.itcode.net.cn/posts/e85d694a/"/>
    <id>https://www.itcode.net.cn/posts/e85d694a/</id>
    <published>2023-08-10T14:14:54.000Z</published>
    <updated>2023-08-10T15:26:30.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树实现原理"><a href="#二叉树实现原理" class="headerlink" title="二叉树实现原理"></a>二叉树实现原理</h2><ul><li>每个节点最多只有2两个子节点</li><li>遍历元素口诀：前序遍历，根-&gt;左-&gt;右、中序遍历，左-&gt;根-&gt;右、后序遍历，左-&gt;右-&gt;根</li><li>排序机制：依次从根节点往下比较，小于当前节点值则走左子节点，大于当前节点值则走右子节点，然后用中序遍历</li></ul><p>下面对一组数字进行排序：4、2、1、5、3、6，排序机制添加元素（箭头为中序排序顺序），结果如下图</p><p><img src="https://img.itcode.net.cn/blog/202308102217969.png" alt="image-20230810221716805"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li>Tree</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface Tree&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public boolean add(E e);</span><br><span class="line"></span><br><span class="line">    public void sort(List&lt;E&gt; list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BinaryTreeSort</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">public class BinaryTreeSort implements Tree&lt;Integer&gt; &#123;</span><br><span class="line">    // 根节点</span><br><span class="line">    private Node&lt;Integer&gt; root;</span><br><span class="line"></span><br><span class="line">    public BinaryTreeSort() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 依次从根节点往下比较，小于当前节点值则走左子节点，大于当前节点值则走右子节点</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean add(Integer i) &#123;</span><br><span class="line">        Node&lt;Integer&gt; node = new Node&lt;&gt;(i);</span><br><span class="line">        // 根节点不存在</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            root = node;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;Integer&gt; newNode = new Node&lt;&gt;(i, null, null);</span><br><span class="line">        Node&lt;Integer&gt; parent = parent(null, i);</span><br><span class="line">        if (Integer.compare(i, parent.value) == -1) &#123;</span><br><span class="line">            parent.left = newNode;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            parent.right = newNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 利用中序遍历来排序</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void sort(List&lt;Integer&gt; list) &#123;</span><br><span class="line">        list.forEach(v -&gt; &#123;</span><br><span class="line">            add(v);</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;Integer&gt; sortList = new ArrayList&lt;&gt;();</span><br><span class="line">        ldr(root, sortList);</span><br><span class="line">        System.out.println(&quot;sortList: &quot;+ sortList.stream().map(v -&gt; String.valueOf(v)).collect(Collectors.joining(&quot;,&quot;)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 递归计算双亲位置</span><br><span class="line">     * 当前节点的子节点不存在时，则当前节点为其双亲</span><br><span class="line">     */</span><br><span class="line">    private Node&lt;Integer&gt; parent(Node&lt;Integer&gt; node, Integer i) &#123;</span><br><span class="line">        Node&lt;Integer&gt; parent = node == null ? root : node;</span><br><span class="line">        if (Integer.compare(i, parent.value) == -1) &#123;</span><br><span class="line">            return parent.left == null ? parent : parent(parent.left, i);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return parent.right == null ? parent : parent(parent.right, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 前序遍历，根-&gt;左-&gt;右</span><br><span class="line">     */</span><br><span class="line">    private void rld(Node&lt;Integer&gt; node, List&lt;Integer&gt; sortList) &#123;</span><br><span class="line">        if (node != null) &#123;</span><br><span class="line">            sortList.add(node.value);</span><br><span class="line">            rld(node.left, sortList);</span><br><span class="line">            rld(node.right, sortList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 中序遍历，左-&gt;根-&gt;右</span><br><span class="line">     */</span><br><span class="line">    private void ldr(Node&lt;Integer&gt; node, List&lt;Integer&gt; sortList) &#123;</span><br><span class="line">        if (node != null) &#123;</span><br><span class="line">            ldr(node.left, sortList);</span><br><span class="line">            sortList.add(node.value);</span><br><span class="line">            ldr(node.right, sortList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 后序遍历，左-&gt;右-&gt;根</span><br><span class="line">     */</span><br><span class="line">    private void lrd(Node&lt;Integer&gt; node, List&lt;Integer&gt; sortList) &#123;</span><br><span class="line">        if (node != null) &#123;</span><br><span class="line">            lrd(node.left, sortList);</span><br><span class="line">            lrd(node.right, sortList);</span><br><span class="line">            sortList.add(node.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 二叉树节点类</span><br><span class="line">     */</span><br><span class="line">    class Node&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">        // 节点内容</span><br><span class="line">        private E value;</span><br><span class="line"></span><br><span class="line">        // 左节点</span><br><span class="line">        private Node&lt;E&gt; left;</span><br><span class="line"></span><br><span class="line">        // 右节点</span><br><span class="line">        private Node&lt;E&gt; right;</span><br><span class="line"></span><br><span class="line">        public Node() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Node(E value) &#123;</span><br><span class="line">            this.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Node(E value, Node&lt;E&gt; left, Node&lt;E&gt; right) &#123;</span><br><span class="line">            this.value = value;</span><br><span class="line">            this.left = left;</span><br><span class="line">            this.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BinaryTreeTest</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class BinaryTreeTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(4,2,1,5,3,6);</span><br><span class="line">        BinaryTreeSort binaryTreeSort = new BinaryTreeSort();</span><br><span class="line">        binaryTreeSort.sort(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;二叉树实现原理&quot;&gt;&lt;a href=&quot;#二叉树实现原理&quot; class=&quot;headerlink&quot; title=&quot;二叉树实现原理&quot;&gt;&lt;/a&gt;二叉树实现原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;每个节点最多只有2两个子节点&lt;/li&gt;
&lt;li&gt;遍历元素口诀：前序遍历，根-&amp;gt;左-&amp;gt;右、中序遍历，左-&amp;gt;根-&amp;gt;右、后序遍历，左-&amp;gt;右-&amp;gt;根&lt;/li&gt;
&lt;li&gt;排序机制：依次从根节点往下比较，小于当前节点值则走左子节点，大于当前节点值则走右子节点，然后用中序遍历&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面对一组数字进行排序：4、2、1、5、3、6，排序机制添加元素（箭头为中序排序顺序），结果如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.itcode.net.cn/blog/202308102217969.png&quot; alt=&quot;image-20230810221716805&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Tree&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface Tree&amp;lt;E&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public boolean add(E e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void sort(List&amp;lt;E&amp;gt; list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;BinaryTreeSort&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class BinaryTreeSort implements Tree&amp;lt;Integer&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 根节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Node&amp;lt;Integer&amp;gt; root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public BinaryTreeSort() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 依次从根节点往下比较，小于当前节点值则走左子节点，大于当前节点值则走右子节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public boolean add(Integer i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Node&amp;lt;Integer&amp;gt; node = new Node&amp;lt;&amp;gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 根节点不存在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (root == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            root = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Node&amp;lt;Integer&amp;gt; newNode = new Node&amp;lt;&amp;gt;(i, null, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Node&amp;lt;Integer&amp;gt; parent = parent(null, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (Integer.compare(i, parent.value) == -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            parent.left = newNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            parent.right = newNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 利用中序遍历来排序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void sort(List&amp;lt;Integer&amp;gt; list) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        list.forEach(v -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            add(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Integer&amp;gt; sortList = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ldr(root, sortList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;sortList: &amp;quot;+ sortList.stream().map(v -&amp;gt; String.valueOf(v)).collect(Collectors.joining(&amp;quot;,&amp;quot;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 递归计算双亲位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 当前节点的子节点不存在时，则当前节点为其双亲&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Node&amp;lt;Integer&amp;gt; parent(Node&amp;lt;Integer&amp;gt; node, Integer i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Node&amp;lt;Integer&amp;gt; parent = node == null ? root : node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (Integer.compare(i, parent.value) == -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return parent.left == null ? parent : parent(parent.left, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return parent.right == null ? parent : parent(parent.right, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 前序遍历，根-&amp;gt;左-&amp;gt;右&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void rld(Node&amp;lt;Integer&amp;gt; node, List&amp;lt;Integer&amp;gt; sortList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (node != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sortList.add(node.value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rld(node.left, sortList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rld(node.right, sortList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 中序遍历，左-&amp;gt;根-&amp;gt;右&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void ldr(Node&amp;lt;Integer&amp;gt; node, List&amp;lt;Integer&amp;gt; sortList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (node != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ldr(node.left, sortList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sortList.add(node.value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ldr(node.right, sortList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 后序遍历，左-&amp;gt;右-&amp;gt;根&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void lrd(Node&amp;lt;Integer&amp;gt; node, List&amp;lt;Integer&amp;gt; sortList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (node != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lrd(node.left, sortList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lrd(node.right, sortList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sortList.add(node.value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 二叉树节点类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    class Node&amp;lt;E&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 节点内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        private E value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 左节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        private Node&amp;lt;E&amp;gt; left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 右节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        private Node&amp;lt;E&amp;gt; right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public Node() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public Node(E value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            this.value = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public Node(E value, Node&amp;lt;E&amp;gt; left, Node&amp;lt;E&amp;gt; right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            this.value = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            this.left = left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            this.right = right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;BinaryTreeTest&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.itcode.net.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="algorithms" scheme="https://www.itcode.net.cn/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>循环队列</title>
    <link href="https://www.itcode.net.cn/posts/b66774c1/"/>
    <id>https://www.itcode.net.cn/posts/b66774c1/</id>
    <published>2023-08-10T11:37:24.000Z</published>
    <updated>2023-08-10T13:51:58.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="循环队列实现原理"><a href="#循环队列实现原理" class="headerlink" title="循环队列实现原理"></a>循环队列实现原理</h2><ul><li>队列长度固定，队列有头部指针（front）、尾部指针(rear)两个指针</li><li>每插入一个元素，尾部指针前移一位</li><li>每取出一个元素，头部指针前移一位</li><li>队列满了之后，取出一个元素，再加入一个元素，尾部指针归零</li><li>取元素的个数达到队列最大长度之后，头部指针归零</li></ul><p><img src="https://img.itcode.net.cn/blog/202308102143069.png" alt="image-20230810214257848"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li>先来个接口类</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public interface Queue&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加元素</span><br><span class="line">     */</span><br><span class="line">    boolean push(T t);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 取出元素，先进先出</span><br><span class="line">     */</span><br><span class="line">    T pop();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断队列是否已满</span><br><span class="line">     */</span><br><span class="line">    boolean isFull();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断队列是否为空</span><br><span class="line">     */</span><br><span class="line">    boolean isEmpty();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再来个抽象类，保证子类自己实现接口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AbstractQueue&lt;T&gt; implements Queue&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean push(T t) &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;不支持的方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public T pop() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;不支持的方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isFull() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;不支持的方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;不支持的方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>队列实现类</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">public class CycleQueue&lt;T&gt; extends AbstractQueue&lt;T&gt; implements Queue&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    // 队列初始化大小</span><br><span class="line">    private static final int CAPCAITY = 6;</span><br><span class="line"></span><br><span class="line">    // 队列头</span><br><span class="line">    volatile int front;</span><br><span class="line"></span><br><span class="line">    // 队列尾</span><br><span class="line">    volatile int rear;</span><br><span class="line"></span><br><span class="line">    // 队列元素</span><br><span class="line">    volatile T[] arrays;</span><br><span class="line"></span><br><span class="line">    public CycleQueue() &#123;</span><br><span class="line">        this.arrays = (T[]) new Object[CAPCAITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加元素，队尾下标+1</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean push(T t) &#123;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            if (!isFull()) &#123;</span><br><span class="line">                arrays[rear] = t;</span><br><span class="line">                // 队尾指针+1后的值等于队列容积时，队尾下标重置为0，以实现队列循环使用</span><br><span class="line">                if (++rear == CAPCAITY) &#123;</span><br><span class="line">                    rear = 0;</span><br><span class="line">                &#125;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 取出元素，队列头下标+1</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public T pop() &#123;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            if (!isEmpty()) &#123;</span><br><span class="line">                System.out.print(&quot;当前数组： &quot;);</span><br><span class="line">                for (int i=0; i&lt;arrays.length; i++) &#123;</span><br><span class="line">                    System.out.print(arrays[i] + &quot;,&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(&quot; - &quot;);</span><br><span class="line"></span><br><span class="line">                final T cur = arrays[front];</span><br><span class="line">                arrays[front] = null;</span><br><span class="line">                front++;</span><br><span class="line">                // 队头指针+1后的值等于队列容积时，队头下标重置为0，以实现队列循环使用</span><br><span class="line">                if (front == CAPCAITY) &#123;</span><br><span class="line">                    front = 0;</span><br><span class="line">                &#125;</span><br><span class="line">                return cur;</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断队列是否满</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isFull() &#123;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            return front == rear &amp;&amp; arrays[rear] != null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断队列是否为空</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            return front == rear &amp;&amp; arrays[rear] == null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>生产者（当队列满了之后等待，有元素被取出则继续生产）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//起3个线程类，2个生产者，1一个消费者，生产速度大于消费速度</span><br><span class="line">public class PushQueueThread extends Thread&#123;</span><br><span class="line">    private CycleQueue queue;</span><br><span class="line"></span><br><span class="line">    private String threadName;</span><br><span class="line"></span><br><span class="line">    public PushQueueThread(CycleQueue queue, String threadName) &#123;</span><br><span class="line">        this.queue = queue;</span><br><span class="line">        this.threadName = threadName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        synchronized (queue) &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                int i = new SecureRandom().nextInt(1000);</span><br><span class="line">                while (queue.isFull()) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        System.out.print(threadName + &quot; - 发现队列满了，排队等位中。。。。\n&quot;);</span><br><span class="line">                        queue.wait();</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                queue.push(i);</span><br><span class="line">                System.out.print(threadName + &quot;-放入元素： &quot; + i + &quot;\n&quot;);</span><br><span class="line">                try &#123;</span><br><span class="line">                    queue.wait(100);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消费者（取出元素之后通知生产者生产）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class PopQueueThread extends Thread&#123;</span><br><span class="line"></span><br><span class="line">    private CycleQueue queue;</span><br><span class="line"></span><br><span class="line">    private String threadName;</span><br><span class="line"></span><br><span class="line">    public PopQueueThread(CycleQueue queue, String threadName) &#123;</span><br><span class="line">        this.queue = queue;</span><br><span class="line">        this.threadName = threadName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        synchronized (queue) &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                if (!queue.isEmpty()) &#123;</span><br><span class="line">                    Object o = queue.pop();</span><br><span class="line">                    System.out.print(threadName + &quot;-取出元素: &quot;+o + &quot;\n&quot;);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        queue.wait(100);</span><br><span class="line">                        System.out.println(threadName + &quot; - 有空位了，下一位上来吧。。。&quot;);</span><br><span class="line">                        queue.notifyAll();</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        System.out.print(threadName + &quot; - 发现队列空了，坐等客人上门。。。。\n&quot;);</span><br><span class="line">                        queue.wait(200);</span><br><span class="line">                        queue.notifyAll();</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class CycleQueueTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        CycleQueue queue = new CycleQueue();</span><br><span class="line">        PushQueueThread pushThread1 = new PushQueueThread(queue, &quot;Push1&quot;);</span><br><span class="line">        PushQueueThread pushThread2 = new PushQueueThread(queue, &quot;Push2&quot;);</span><br><span class="line">        PopQueueThread popThread = new PopQueueThread(queue, &quot;Pop1&quot;);</span><br><span class="line">        pushThread1.start();</span><br><span class="line">        pushThread2.start();</span><br><span class="line">        popThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">当前数组： 257,null,null,null,null,null, - Pop1-取出元素: 257</span><br><span class="line">Push2-放入元素： 73</span><br><span class="line">Push1-放入元素： 307</span><br><span class="line">Push2-放入元素： 461</span><br><span class="line">Pop1 - 有空位了，下一位上来吧。。。</span><br><span class="line">当前数组： null,73,307,461,null,null, - Pop1-取出元素: 73</span><br><span class="line">Push1-放入元素： 271</span><br><span class="line">Push2-放入元素： 21</span><br><span class="line">Push2-放入元素： 351</span><br><span class="line">Pop1 - 有空位了，下一位上来吧。。。</span><br><span class="line">当前数组： 351,null,307,461,271,21, - Pop1-取出元素: 307</span><br><span class="line">Push2-放入元素： 66</span><br><span class="line">Push1-放入元素： 557</span><br><span class="line">Push1 - 发现队列满了，排队等位中。。。。</span><br><span class="line">Pop1 - 有空位了，下一位上来吧。。。</span><br><span class="line">当前数组： 351,66,557,461,271,21, - Pop1-取出元素: 461</span><br><span class="line">Push1-放入元素： 924</span><br><span class="line">Push2 - 发现队列满了，排队等位中。。。。</span><br><span class="line">Pop1 - 有空位了，下一位上来吧。。。</span><br><span class="line">当前数组： 351,66,557,924,271,21, - Pop1-取出元素: 271</span><br><span class="line">Push2-放入元素： 170</span><br><span class="line">Push1 - 发现队列满了，排队等位中。。。。</span><br><span class="line">Pop1 - 有空位了，下一位上来吧。。。</span><br><span class="line">当前数组： 351,66,557,924,170,21, - Pop1-取出元素: 21</span><br><span class="line">Push1-放入元素： 189</span><br><span class="line">Push2 - 发现队列满了，排队等位中。。。。</span><br><span class="line">Pop1 - 有空位了，下一位上来吧。。。</span><br><span class="line">当前数组： 351,66,557,924,170,189, - Pop1-取出元素: 351</span><br><span class="line">Push2-放入元素： 964</span><br><span class="line">Push1 - 发现队列满了，排队等位中。。。。</span><br><span class="line">Pop1 - 有空位了，下一位上来吧。。。</span><br><span class="line">当前数组： 964,66,557,924,170,189, - Pop1-取出元素: 66</span><br><span class="line">Push2-放入元素： 490</span><br><span class="line">Push1 - 发现队列满了，排队等位中。。。。</span><br><span class="line">Pop1 - 有空位了，下一位上来吧。。。</span><br><span class="line">当前数组： 964,490,557,924,170,189, - Pop1-取出元素: 557</span><br><span class="line">Push1-放入元素： 996</span><br><span class="line">Push2 - 发现队列满了，排队等位中。。。。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;循环队列实现原理&quot;&gt;&lt;a href=&quot;#循环队列实现原理&quot; class=&quot;headerlink&quot; title=&quot;循环队列实现原理&quot;&gt;&lt;/a&gt;循环队列实现原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;队列长度固定，队列有头部指针（front）、尾部指针(rear)两个指针&lt;/li&gt;
&lt;li&gt;每插入一个元素，尾部指针前移一位&lt;/li&gt;
&lt;li&gt;每取出一个元素，头部指针前移一位&lt;/li&gt;
&lt;li&gt;队列满了之后，取出一个元素，再加入一个元素，尾部指针归零&lt;/li&gt;
&lt;li&gt;取元素的个数达到队列最大长度之后，头部指针归零&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://img.itcode.net.cn/blog/202308102143069.png&quot; alt=&quot;image-20230810214257848&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;先来个接口类&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface Queue&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 添加元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean push(T t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 取出元素，先进先出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    T pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 判断队列是否已满&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean isFull();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 判断队列是否为空&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean isEmpty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;再来个抽象类，保证子类自己实现接口&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public abstract class AbstractQueue&amp;lt;T&amp;gt; implements Queue&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public boolean push(T t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throw new UnsupportedOperationException(&amp;quot;不支持的方法&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public T pop() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throw new UnsupportedOperationException(&amp;quot;不支持的方法&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public boolean isFull() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throw new UnsupportedOperationException(&amp;quot;不支持的方法&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public boolean isEmpty() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throw new UnsupportedOperationException(&amp;quot;不支持的方法&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;队列实现类&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class CycleQueue&amp;lt;T&amp;gt; extends AbstractQueue&amp;lt;T&amp;gt; implements Queue&amp;lt;T&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 队列初始化大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int CAPCAITY = 6;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 队列头&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    volatile int front;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 队列尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    volatile int rear;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 队列元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    volatile T[] arrays;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public CycleQueue() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.arrays = (T[]) new Object[CAPCAITY];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 添加元素，队尾下标+1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public boolean push(T t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (!isFull()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                arrays[rear] = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 队尾指针+1后的值等于队列容积时，队尾下标重置为0，以实现队列循环使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (++rear == CAPCAITY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    rear = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 取出元素，队列头下标+1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public T pop() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (!isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.print(&amp;quot;当前数组： &amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                for (int i=0; i&amp;lt;arrays.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.print(arrays[i] + &amp;quot;,&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.print(&amp;quot; - &amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final T cur = arrays[front];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                arrays[front] = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                front++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 队头指针+1后的值等于队列容积时，队头下标重置为0，以实现队列循环使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (front == CAPCAITY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    front = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 判断队列是否满&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public boolean isFull() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return front == rear &amp;amp;&amp;amp; arrays[rear] != null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 判断队列是否为空&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public boolean isEmpty() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        synchronized (this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return front == rear &amp;amp;&amp;amp; arrays[rear] == null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.itcode.net.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="algorithms" scheme="https://www.itcode.net.cn/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>动态数组</title>
    <link href="https://www.itcode.net.cn/posts/3594e15e/"/>
    <id>https://www.itcode.net.cn/posts/3594e15e/</id>
    <published>2023-08-10T11:09:49.000Z</published>
    <updated>2023-08-11T12:42:40.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态数组实现原理"><a href="#动态数组实现原理" class="headerlink" title="动态数组实现原理"></a>动态数组实现原理</h2><p>相较于大家都熟悉的普通数组，动态数组主要体现在两个方面，即数组扩容与数组缩减，综合体现如下：</p><ul><li>添加元素</li></ul><p>不局限于只在数组末尾添加，而是能够随意选择索引位置(只要不超过数组长度)</p><ul><li>删除元素</li></ul><p>同添加元素，也可根据索引进行选择</p><ul><li>数组扩容</li></ul><p>数组一旦装满元素，可触发数组扩容，即新建一个更长的数组，将原数组元素转移到新数组中，并将引用指向新数组，完成数组的变更；</p><ul><li>数组缩容</li></ul><p>如果数组元素相对总容量来说过少(例如数组元素个数小于数组容量的1&#x2F;4)，便可触发数组缩减，即新建一个更短的数组，并转移元素至新数组。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li>Array</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">public class Array&lt;E&gt; &#123;</span><br><span class="line">    private E[] data;       // 使用静态数组存放数组元素</span><br><span class="line">    private int size;       // 记录数组元素数量</span><br><span class="line"></span><br><span class="line">    public Array(int capacity) &#123;</span><br><span class="line">        this.data = (E[]) new Object[capacity];</span><br><span class="line">        this.size = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getSize() &#123;</span><br><span class="line">        return size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Array() &#123;</span><br><span class="line">        this(10);   // 默认capacity为10</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 数组扩容/缩减</span><br><span class="line">    public void resize(int newCapacity) &#123;</span><br><span class="line">        // 新数组长度必须大于0</span><br><span class="line">        if (newCapacity &lt; 0) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;capacity must &gt; 0!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        // 创建新数组</span><br><span class="line">        E[] newData = (E[]) new Object[newCapacity];</span><br><span class="line">        // 将原数组元素放入新数组中</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        // 将引用指向新数组</span><br><span class="line">        data = newData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 在指定位置添加元素</span><br><span class="line">     * 指定位置处的元素需要向右侧移动一个单位</span><br><span class="line">     * @param index   索引</span><br><span class="line">     * @param element 要添加的元素</span><br><span class="line">     */</span><br><span class="line">    public void add(int index, E element) &#123;</span><br><span class="line">        if (index &lt; 0 || index &gt; size) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal index, index must &gt; 0 and &lt;= size!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        // 数组满员触发扩容</span><br><span class="line">        if (size == data.length) &#123;</span><br><span class="line">            resize(2 * data.length);  // 扩容为原数组的2倍</span><br><span class="line">        &#125;</span><br><span class="line">        // 从尾部开始，向右移动元素，直到index</span><br><span class="line">        for (int i = size - 1; i &gt;= index; i--) &#123;</span><br><span class="line">            data[i + 1] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        // 添加元素</span><br><span class="line">        data[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 数组头部添加元素</span><br><span class="line">    public void addFirst(E element) &#123;</span><br><span class="line">        add(0, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 数组尾部添加元素</span><br><span class="line">    public void addLast(E element) &#123;</span><br><span class="line">        add(size, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除指定位置元素</span><br><span class="line">     * 通过向左移动一位，覆盖指定位置处的元素，实现删除元素(data[size - 1] = null)</span><br><span class="line">     * @param index 索引</span><br><span class="line">     */</span><br><span class="line">    public E remove(int index) &#123;</span><br><span class="line">        if (index &lt; 0 || index &gt; size) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal index, index must &gt; 0 and &lt; size!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        // 数组长度为0时抛出异常</span><br><span class="line">        if (size == 0) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Empty array!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        E removedElement = data[index];</span><br><span class="line">        // 向左移动元素</span><br><span class="line">        for (int i = index; i &lt; size - 1; i++) &#123;</span><br><span class="line">            data[i] = data[i + 1];</span><br><span class="line">        &#125;</span><br><span class="line">        // 将尾部空闲出的位置置为空，释放资源</span><br><span class="line">        data[size - 1] = null;</span><br><span class="line">        size--;</span><br><span class="line">        // size过小触发数组缩减</span><br><span class="line">        if (size == data.length / 4 &amp;&amp; data.length / 2 != 0) &#123;</span><br><span class="line">            resize(data.length / 2);</span><br><span class="line">        &#125;</span><br><span class="line">        return removedElement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除头部元素</span><br><span class="line">    public E removeFirst() &#123;</span><br><span class="line">        return remove(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除尾部元素</span><br><span class="line">    public E removeLast() &#123;</span><br><span class="line">        return remove(size - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 重写Override方法，自定义数组显示格式</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        StringBuilder str = new StringBuilder();</span><br><span class="line">        // 显示数组的整体情况(长度、总容量)</span><br><span class="line">        str.append(String.format(&quot;Array: size = %d, capacity = %d\n[&quot;, size, data.length));</span><br><span class="line">        // 循环添加数组元素至str</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            str.append(data[i]);</span><br><span class="line">            if (i &lt; size - 1) &#123;</span><br><span class="line">                str.append(&quot;, &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str.append(&quot;]&quot;);</span><br><span class="line">        return str.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ArrayTest</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 添加10个元素</span><br><span class="line">        Array&lt;Integer&gt; arr = new Array&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            arr.add(i, i);</span><br><span class="line">        &#125;</span><br><span class="line">        // 查看数组当前状态</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        // 继续添加元素，观察是否扩容</span><br><span class="line">        arr.add(arr.getSize(), 7);</span><br><span class="line">        System.out.println(arr);</span><br><span class="line"></span><br><span class="line">        // 再删除6个元素，观察是否缩减</span><br><span class="line">        for (int i = 0; i &lt; 6; i++) &#123;</span><br><span class="line">            System.out.println(&quot;元素&quot; + arr.removeFirst() + &quot;已被删除！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;动态数组实现原理&quot;&gt;&lt;a href=&quot;#动态数组实现原理&quot; class=&quot;headerlink&quot; title=&quot;动态数组实现原理&quot;&gt;&lt;/a&gt;动态数组实现原理&lt;/h2&gt;&lt;p&gt;相较于大家都熟悉的普通数组，动态数组主要体现在两个方面，即数组扩容与数组缩减，综合体现如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不局限于只在数组末尾添加，而是能够随意选择索引位置(只要不超过数组长度)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同添加元素，也可根据索引进行选择&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组扩容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组一旦装满元素，可触发数组扩容，即新建一个更长的数组，将原数组元素转移到新数组中，并将引用指向新数组，完成数组的变更；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组缩容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果数组元素相对总容量来说过少(例如数组元素个数小于数组容量的1&amp;#x2F;4)，便可触发数组缩减，即新建一个更短的数组，并转移元素至新数组。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.itcode.net.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="algorithms" scheme="https://www.itcode.net.cn/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="https://www.itcode.net.cn/posts/2362a8ea/"/>
    <id>https://www.itcode.net.cn/posts/2362a8ea/</id>
    <published>2023-08-08T14:51:22.000Z</published>
    <updated>2023-08-11T12:41:52.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h2><p>是一种数据结构，通过指针连接数据项，提供了一些灵活的操作。</p><ul><li>优点<ul><li>高效插入和删除</li></ul></li><li>缺点<ul><li>查询时间复杂度高</li></ul></li></ul><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><p>单链表包含具有数据字段的节点以及指向节点行中的下一个节点的“下一个”字段。</p><p><img src="https://img.itcode.net.cn/blog/202308082301352.png" alt="image-20230808230100371"></p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>在“双向链表”中，除了下一个节点链接之外，每个节点还包含指向序列中“前一个”节点的第二个链接字段。</p><p><img src="https://img.itcode.net.cn/blog/202308082301320.png" alt="image-20230808230121182"></p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>在列表的最后一个节点中，链接字段通常包含一个空引用，一个特殊的值用于指示缺少进一步的节点。一个不太常见的约定是让它指向列表的第一个节点。在这种情况下，列表被称为“循环”或“循环链接”；否则，它被称为“开放”或“线性”。它是一个列表，其中最后一个指针指向第一个节点。</p><p><img src="https://img.itcode.net.cn/blog/202308082301810.png" alt="image-20230808230137634"></p><h2 id="实现一个双向链表"><a href="#实现一个双向链表" class="headerlink" title="实现一个双向链表"></a>实现一个双向链表</h2><ul><li><p>链表节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private class Node&lt;E&gt;&#123;  </span><br><span class="line">    //当前节点元素  </span><br><span class="line">    E value;  </span><br><span class="line">  </span><br><span class="line">    //上一个节点  </span><br><span class="line">    Node&lt;E&gt; prev;  </span><br><span class="line">  </span><br><span class="line">    //下一个节点  </span><br><span class="line">    Node&lt;E&gt; next;  </span><br><span class="line">  </span><br><span class="line">    public Node(E value, Node&lt;E&gt; next)&#123;  </span><br><span class="line">        this.value = value;  </span><br><span class="line">        this.next = next;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Node(Node&lt;E&gt; prev, E value, Node&lt;E&gt; next)&#123;  </span><br><span class="line">        this.value = value;  </span><br><span class="line">        this.prev = prev;  </span><br><span class="line">        this.next = next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>头插节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 往头部添加节点  </span><br><span class="line"> * @param e 元素  </span><br><span class="line"> */  </span><br><span class="line">private void linkBefore(E e) &#123;  </span><br><span class="line">    final Node&lt;E&gt; temp = first;  </span><br><span class="line">    Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, temp);  </span><br><span class="line">    if (temp == null)&#123;  </span><br><span class="line">        last = newNode;  </span><br><span class="line">    &#125;else &#123;  </span><br><span class="line">        temp.prev = newNode;  </span><br><span class="line">    &#125;  </span><br><span class="line">    first = newNode;  </span><br><span class="line">    size++;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>尾插节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 往尾部添加节点  </span><br><span class="line"> * @param e 元素  </span><br><span class="line"> */  </span><br><span class="line">private void linkLast(E e) &#123;  </span><br><span class="line">    final Node&lt;E&gt; temp = last;  </span><br><span class="line">    //新节点成为尾部节点  </span><br><span class="line">    Node&lt;E&gt; newNode = new Node&lt;&gt;(temp, e, null);  </span><br><span class="line">    last = newNode;  </span><br><span class="line">    //如果原来尾部节点为空，则为第一个节点  </span><br><span class="line">    if (temp == null)&#123;  </span><br><span class="line">        first = newNode;  </span><br><span class="line">    &#125;else &#123;  </span><br><span class="line">        temp.next = newNode;  </span><br><span class="line">    &#125;  </span><br><span class="line">    size++;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>检查下标是否越界</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//检查下标是否越界  </span><br><span class="line">private void checkIndex(int index)&#123;  </span><br><span class="line">    if(index &lt; 0 || index &gt;= size)&#123;  </span><br><span class="line">        throw  new IndexOutOfBoundsException(&quot;下标越界：index &lt; 0 || index &gt;= size&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取下标位置节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 获取下标位置的节点  </span><br><span class="line"> * @param index  </span><br><span class="line"> * @return  </span><br><span class="line"> */private Node&lt;E&gt; node(int index)&#123;  </span><br><span class="line">    int half = size &gt;&gt; 1;  </span><br><span class="line">    //下标小于链表长度一半，从头开始找，否则,从尾部开始找  </span><br><span class="line">    Node&lt;E&gt; cur;  </span><br><span class="line">    if(index &lt; half)&#123;  </span><br><span class="line">        cur = first;  </span><br><span class="line">        for (int i = 0; i &lt; index; i++) &#123;  </span><br><span class="line">            cur = cur.next;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;else&#123;  </span><br><span class="line">        cur = last;  </span><br><span class="line">        for(int i = (size - 1); i &gt; index; i--)&#123;  </span><br><span class="line">            cur = last.prev;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return cur;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**  </span><br><span class="line"> * 移除下标位置的节点  </span><br><span class="line"> * @param index  </span><br><span class="line"> * @return  </span><br><span class="line"> */@Override  </span><br><span class="line">public E remove(int index)&#123;  </span><br><span class="line">    checkIndex(index);  </span><br><span class="line">    Node&lt;E&gt; cur = node(index);  </span><br><span class="line">    if(cur.prev == null)&#123;  </span><br><span class="line">        first =cur.next;  </span><br><span class="line">    &#125;else &#123;  </span><br><span class="line">        cur.prev.next = cur.next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    size--;  </span><br><span class="line">    return cur.value;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><ul><li>LinkedList<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedList&lt;E&gt; extends AbstractSequentialList&lt;E&gt; &#123;  </span><br><span class="line">  </span><br><span class="line">    //链表长度  </span><br><span class="line">    transient int size;  </span><br><span class="line">  </span><br><span class="line">    //头部节点  </span><br><span class="line">    transient Node&lt;E&gt; first;  </span><br><span class="line">  </span><br><span class="line">    //尾部节点  </span><br><span class="line">    transient Node&lt;E&gt; last;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public ListIterator&lt;E&gt; listIterator(int index) &#123;  </span><br><span class="line">        return new ListItr(index);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public int size() &#123;  </span><br><span class="line">        return this.size;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    //在尾部添加（默认）  </span><br><span class="line">    @Override  </span><br><span class="line">    public boolean add(E e)&#123;  </span><br><span class="line">        linkLast(e);  </span><br><span class="line">        return true;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    //在头部添加  </span><br><span class="line">    public boolean addFirst(E e)&#123;  </span><br><span class="line">        linkBefore(e);  </span><br><span class="line">        return true;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    //查找下标位置的节点  </span><br><span class="line">    @Override  </span><br><span class="line">    public E get(int index)&#123;  </span><br><span class="line">        checkIndex(index);  </span><br><span class="line">        Node&lt;E&gt; cur = node(index);  </span><br><span class="line">        return cur.value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    /**  </span><br><span class="line">     * 移除下标位置的节点  </span><br><span class="line">     * @param index  </span><br><span class="line">     * @return  </span><br><span class="line">     */    @Override  </span><br><span class="line">    public E remove(int index)&#123;  </span><br><span class="line">        checkIndex(index);  </span><br><span class="line">        Node&lt;E&gt; cur = node(index);  </span><br><span class="line">        if(cur.prev == null)&#123;  </span><br><span class="line">            first =cur.next;  </span><br><span class="line">        &#125;else &#123;  </span><br><span class="line">            cur.prev.next = cur.next;  </span><br><span class="line">        &#125;  </span><br><span class="line">        size--;  </span><br><span class="line">        return cur.value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    /**  </span><br><span class="line">     * 往头部添加节点  </span><br><span class="line">     * @param e 元素  </span><br><span class="line">     */  </span><br><span class="line">    private void linkBefore(E e) &#123;  </span><br><span class="line">        final Node&lt;E&gt; temp = first;  </span><br><span class="line">        Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, temp);  </span><br><span class="line">        if (temp == null)&#123;  </span><br><span class="line">            last = newNode;  </span><br><span class="line">        &#125;else &#123;  </span><br><span class="line">            temp.prev = newNode;  </span><br><span class="line">        &#125;  </span><br><span class="line">        first = newNode;  </span><br><span class="line">        size++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /**  </span><br><span class="line">     * 往尾部添加节点  </span><br><span class="line">     * @param e 元素  </span><br><span class="line">     */  </span><br><span class="line">    private void linkLast(E e) &#123;  </span><br><span class="line">        final Node&lt;E&gt; temp = last;  </span><br><span class="line">        //新节点成为尾部节点  </span><br><span class="line">        Node&lt;E&gt; newNode = new Node&lt;&gt;(temp, e, null);  </span><br><span class="line">        last = newNode;  </span><br><span class="line">        //如果原来尾部节点为空，则为第一个节点  </span><br><span class="line">        if (temp == null)&#123;  </span><br><span class="line">            first = newNode;  </span><br><span class="line">        &#125;else &#123;  </span><br><span class="line">            temp.next = newNode;  </span><br><span class="line">        &#125;  </span><br><span class="line">        size++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    /**  </span><br><span class="line">     * 获取下标位置的节点  </span><br><span class="line">     * @param index  </span><br><span class="line">     * @return  </span><br><span class="line">     */    private Node&lt;E&gt; node(int index)&#123;  </span><br><span class="line">        int half = size &gt;&gt; 1;  </span><br><span class="line">        //下标小于链表长度一半，从头开始找，否则,从尾部开始找  </span><br><span class="line">        Node&lt;E&gt; cur;  </span><br><span class="line">        if(index &lt; half)&#123;  </span><br><span class="line">            cur = first;  </span><br><span class="line">            for (int i = 0; i &lt; index; i++) &#123;  </span><br><span class="line">                cur = cur.next;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;else&#123;  </span><br><span class="line">            cur = last;  </span><br><span class="line">            for(int i = (size - 1); i &gt; index; i--)&#123;  </span><br><span class="line">                cur = last.prev;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return cur;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    //检查下标是否越界  </span><br><span class="line">    private void checkIndex(int index)&#123;  </span><br><span class="line">        if(index &lt; 0 || index &gt;= size)&#123;  </span><br><span class="line">            throw  new IndexOutOfBoundsException(&quot;下标越界：index &lt; 0 || index &gt;= size&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    //内部内节点  </span><br><span class="line">    private class Node&lt;E&gt;&#123;  </span><br><span class="line">        //当前节点元素  </span><br><span class="line">        E value;  </span><br><span class="line">  </span><br><span class="line">        //上一个节点  </span><br><span class="line">        Node&lt;E&gt; prev;  </span><br><span class="line">  </span><br><span class="line">        //下一个节点  </span><br><span class="line">        Node&lt;E&gt; next;  </span><br><span class="line">  </span><br><span class="line">        public Node(E value, Node&lt;E&gt; next)&#123;  </span><br><span class="line">            this.value = value;  </span><br><span class="line">            this.next = next;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        public Node(Node&lt;E&gt; prev, E value, Node&lt;E&gt; next)&#123;  </span><br><span class="line">            this.value = value;  </span><br><span class="line">            this.prev = prev;  </span><br><span class="line">            this.next = next;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /**  </span><br><span class="line">     * 重写迭代器，实现迭代遍历元素  </span><br><span class="line">     */  </span><br><span class="line">    private class ListItr implements ListIterator&lt;E&gt;&#123;  </span><br><span class="line">        //上一个节点  </span><br><span class="line">        private Node&lt;E&gt; lastReturned;  </span><br><span class="line">        //下一个节点  </span><br><span class="line">        private Node&lt;E&gt; next;  </span><br><span class="line">        //下一个节点下标  </span><br><span class="line">        private int nextIndex;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        public ListItr(int index) &#123;  </span><br><span class="line">            next = (index == size) ? null : node(index);  </span><br><span class="line">            nextIndex = index;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        @Override  </span><br><span class="line">        public boolean hasNext() &#123;  </span><br><span class="line">            return nextIndex &lt; size;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        @Override  </span><br><span class="line">        public E next() &#123;  </span><br><span class="line">            if (!hasNext())&#123;  </span><br><span class="line">                throw new NoSuchElementException();  </span><br><span class="line">            &#125;  </span><br><span class="line">            lastReturned = next;  </span><br><span class="line">            next = next.next;  </span><br><span class="line">            nextIndex++;  </span><br><span class="line">            return lastReturned.value;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        @Override  </span><br><span class="line">        public boolean hasPrevious() &#123;  </span><br><span class="line">            return false;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        @Override  </span><br><span class="line">        public E previous() &#123;  </span><br><span class="line">            return null;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        @Override  </span><br><span class="line">        public int nextIndex() &#123;  </span><br><span class="line">            return nextIndex;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        @Override  </span><br><span class="line">        public int previousIndex() &#123;  </span><br><span class="line">            return 0;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        @Override  </span><br><span class="line">        public void remove() &#123;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        @Override  </span><br><span class="line">        public void set(E e) &#123;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        @Override  </span><br><span class="line">        public void add(E e) &#123;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>LinkedListTest<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedListTest &#123;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        System.out.println(&quot;计时开始：&quot; + LocalDateTime.now());  </span><br><span class="line">        LinkedList&lt;Integer&gt; list = new LinkedList&lt;&gt;();  </span><br><span class="line">        for (int i=1; i&lt;9; i++) &#123;  </span><br><span class="line">            list.add(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(&quot;计时结束：&quot; + LocalDateTime.now());  </span><br><span class="line">        list.addFirst(9);  </span><br><span class="line">        list.add(80);  </span><br><span class="line">  </span><br><span class="line">        print(list);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static void print(LinkedList&lt;Integer&gt; list) &#123;  </span><br><span class="line">        for (Object i : list) &#123;  </span><br><span class="line">            System.out.print(i);  </span><br><span class="line">            System.out.print(&quot;,&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;链表的定义&quot;&gt;&lt;a href=&quot;#链表的定义&quot; class=&quot;headerlink&quot; title=&quot;链表的定义&quot;&gt;&lt;/a&gt;链表的定义&lt;/h2&gt;&lt;p&gt;是一种数据结构，通过指针连接数据项，提供了一些灵活的操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;ul&gt;
&lt;li&gt;高效插入和删除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;查询时间复杂度高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;单向链表&quot;&gt;&lt;a href=&quot;#单向链表&quot; class=&quot;headerlink&quot; title=&quot;单向链表&quot;&gt;&lt;/a&gt;单向链表&lt;/h2&gt;&lt;p&gt;单链表包含具有数据字段的节点以及指向节点行中的下一个节点的“下一个”字段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.itcode.net.cn/blog/202308082301352.png&quot; alt=&quot;image-20230808230100371&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;双向链表&quot;&gt;&lt;a href=&quot;#双向链表&quot; class=&quot;headerlink&quot; title=&quot;双向链表&quot;&gt;&lt;/a&gt;双向链表&lt;/h2&gt;&lt;p&gt;在“双向链表”中，除了下一个节点链接之外，每个节点还包含指向序列中“前一个”节点的第二个链接字段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.itcode.net.cn/blog/202308082301320.png&quot; alt=&quot;image-20230808230121182&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;循环链表&quot;&gt;&lt;a href=&quot;#循环链表&quot; class=&quot;headerlink&quot; title=&quot;循环链表&quot;&gt;&lt;/a&gt;循环链表&lt;/h2&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.itcode.net.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="algorithms" scheme="https://www.itcode.net.cn/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://www.itcode.net.cn/posts/d0edc1ed/"/>
    <id>https://www.itcode.net.cn/posts/d0edc1ed/</id>
    <published>2023-07-26T12:35:13.000Z</published>
    <updated>2023-07-29T10:00:11.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录与文件"><a href="#目录与文件" class="headerlink" title="目录与文件"></a>目录与文件</h2><ul><li>more</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">more [OPTION] FILE…</span><br><span class="line">查看文本文件的内容，屏幕显示完一屏就等待用户按下任意键再滚动到下一屏，如果中途不想继续看下去了，可以按Ctrl+C或q终止显示。</span><br></pre></td></tr></table></figure><ul><li>less</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">less [OPTION] FILE…</span><br><span class="line">查看文本文件的内容，屏幕显示完一屏就等待用户按键，用户可以向上或向下查看，如</span><br><span class="line">果中途不想继续看下去了，可以按Ctrl+C或q终止显示。</span><br></pre></td></tr></table></figure><ul><li>head</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">head [OPTION]… FILE…</span><br><span class="line">显示指定文件的前面几行。如果没有指定文件，将从标准输入（键盘）上读取。如果没</span><br><span class="line">有指定要显示的行数，则默认显示前10行。如果要显示文件的前5行：</span><br><span class="line"></span><br><span class="line">$ head -5 file1</span><br></pre></td></tr></table></figure><ul><li>tail</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tail [OPTION]… FILE…</span><br><span class="line">显示文件的最后几行。若没有指定显示的行或字符数，则默认显示末尾10行。如果要显</span><br><span class="line">示文件末5行：</span><br><span class="line">$ tail -5 file1</span><br></pre></td></tr></table></figure><ul><li>ln</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">链接有两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic</span><br><span class="line">Link）。建立硬链接时，链接文件和被链接文件必须位于同一个文件系统中，并且不能建立</span><br><span class="line">指向目录的硬链接。而对符号链接，则不存在这个问题。默认情况下，ln产生硬链接。如果</span><br><span class="line">给ln命令加上-s选项，则建立符号链接。举例如下，注意ls -l列出文件的硬链接数和字节</span><br><span class="line">数：</span><br><span class="line">硬链接：</span><br><span class="line">touch hello</span><br><span class="line">ln hello word_h</span><br><span class="line"></span><br><span class="line">软链接：</span><br><span class="line">ln -s hello word_s</span><br></pre></td></tr></table></figure><ul><li>tree</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这个命令需要下载安装，ubuntu下</span><br><span class="line">sudo apt-get install tree</span><br><span class="line">按结构树的形状显示目录和文件</span><br></pre></td></tr></table></figure><ul><li>wc</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">利用wc 指令我们可以计算文件的Byte 数、字数、或是列数,若不指定文件名称、或</span><br><span class="line">是所给予的文件名为“-”,则wc 指令会从标准输入设备读取数据。</span><br><span class="line">wc -l ./*</span><br><span class="line"></span><br><span class="line">-c 或–bytes 或–chars 只显示Bytes 数。</span><br><span class="line">-l 或–lines 只显示列数。</span><br><span class="line">-w 或–words 只显示字数。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>du</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查看某个目录的大小：</span><br><span class="line">以M为单位</span><br><span class="line">du -hm /home/itcast/test</span><br><span class="line">以B为单位</span><br><span class="line">du -hb ./*</span><br><span class="line">以K为单位,4k的整数倍</span><br><span class="line">du -hk ./*</span><br><span class="line">总计大小，以M为单位</span><br><span class="line">du -hc ./*</span><br></pre></td></tr></table></figure><ul><li>df</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df查看磁盘使用情况</span><br><span class="line">df --block-size=GB</span><br><span class="line">df --block-size=MB</span><br></pre></td></tr></table></figure><h2 id="文件属性与用户组"><a href="#文件属性与用户组" class="headerlink" title="文件属性与用户组"></a>文件属性与用户组</h2><ul><li>chmod</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">文字设定法</span><br><span class="line">chmod [who] [+|-|=] [mode] 文件名</span><br><span class="line"></span><br><span class="line">操作对象who可是下述字母中的任一个或者它们的组合：</span><br><span class="line">u 表示“用户（user）”，即文件或目录的所有者。</span><br><span class="line">g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。</span><br><span class="line">o 表示“其他（others）用户”。</span><br><span class="line">a 表示“所有（all）用户”。它是系统默认值。</span><br><span class="line"></span><br><span class="line">操作符号可以是：</span><br><span class="line">+ 添加某个权限。</span><br><span class="line">- 取消某个权限。</span><br><span class="line">= 赋予给定权限并取消其他所有权限（如果有的话）。</span><br><span class="line"></span><br><span class="line">设置mode所表示的权限可用下述字母的任意组合：</span><br><span class="line">r 可读。</span><br><span class="line">w 可写。</span><br><span class="line">x 可执行。</span><br><span class="line"></span><br><span class="line">数字设定法</span><br><span class="line">chmod [mode] 文件名</span><br><span class="line">0表示没有权限，</span><br><span class="line">1表示可执行权限，</span><br><span class="line">2表示可写权限，</span><br><span class="line">4表示可读权限，</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user group other</span><br><span class="line">r w x r w x r w x</span><br><span class="line">4 2 1 4 2 1 4 2 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>chown</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">chown [OPTION]… [OWNER:GROUP] FILE…</span><br><span class="line">chown [OPTION]… –reference=RFILE FILE…</span><br><span class="line"></span><br><span class="line">更改某个文件或目录的属主和属组。这个命令也很常用。例如root用户把自己的一个文</span><br><span class="line">件拷贝给用户A, 为了让用户A能够存取这个文件，root用户应该把这个文件的属主设为A，</span><br><span class="line">否则，用户A无法存取这个文件。</span><br><span class="line"></span><br><span class="line">OPTION的主要参数：</span><br><span class="line">* -R 递归式地改变指定目录及其下的所有子目录和文件的拥有者。</span><br><span class="line">* -v 显示chown命令所做的工作。</span><br><span class="line"></span><br><span class="line">比如把一个文件改为itcast用户和nogroup用户组所有</span><br><span class="line">$ sudo chown itcast:nogroup file1</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">* chown需要特权用户才能执行</span><br><span class="line">* 一个文件的owner和owning group是没有关联的。一个文件属于用户A，也属于用户组</span><br><span class="line">B，并不表示用户A属于用户组B。</span><br></pre></td></tr></table></figure><ul><li>chgrp</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chgrp [OPTION]… GROUP FILE…</span><br><span class="line">chgrp [OPTION]… –reference=RFILE FILE…</span><br><span class="line"></span><br><span class="line">该命令改变（指定）指定文件所属的用户组。其中group可以是用户组ID，也可以是/</span><br><span class="line">etc/group文件中用户组的组名。文件名是以空格分开的要改变属组的文件列表，支持通配</span><br><span class="line">符。如果用户不是该文件的属主或超级用户，则不能改变该文件的组。</span><br><span class="line"></span><br><span class="line">OPTION的主要参数：</span><br><span class="line">-R 递归式地改变指定目录及其下的所有子目录和文件的属组。</span><br></pre></td></tr></table></figure><h2 id="查找与检索"><a href="#查找与检索" class="headerlink" title="查找与检索"></a>查找与检索</h2><ul><li>find</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">根据文件名查找</span><br><span class="line">find pathname -options [-print -exec -ok -name -type...]</span><br><span class="line"></span><br><span class="line">在目录中搜索文件，path指定目录路径，系统从这里开始沿着目录树向下查找文件。它</span><br><span class="line">是一个路径列表，相互用空格分离，如果不写path，那么默认为当前目录。Expression 是</span><br><span class="line">find命令接受的表达式，find命令的所有操作都是针对表达式的。</span><br><span class="line"></span><br><span class="line">一条最常用的find命令－－在当前目录及子目录下查找所有以file开头的文件名。</span><br><span class="line">$ find . -name &#x27;file*&#x27;</span><br><span class="line">$ find / -name &#x27;vimrc&#x27;</span><br><span class="line">$ find ~ -name &#x27;*.c&#x27;</span><br><span class="line">$ find /usr/ -name &quot;*tmp*&quot; -exec ls -l &#123; &#125; \;</span><br><span class="line">find ./ -name &quot;*tmp&quot; -ok rm &#123; &#125; \;</span><br></pre></td></tr></table></figure><ul><li>grep</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">根据内容检索</span><br><span class="line">grep [options] PATTERN [FILE...]</span><br><span class="line"></span><br><span class="line">在指定文件中搜索特定的内容，并将含有这些内容的行输出到标准输出。若不指定文件</span><br><span class="line">名，则从标准输入读取。</span><br><span class="line"></span><br><span class="line">[options]部分包含的主要参数：</span><br><span class="line">-I：不区分大小写（只适用于单字符）。</span><br><span class="line">-h：查询多文件时不显示文件名。</span><br><span class="line">-l：查询多文件时只输出包含匹配字符的文件名。</span><br><span class="line">-n：显示匹配行及行号。</span><br><span class="line">-s：不显示不存在或无匹配文本的错误信息。</span><br><span class="line">-v：显示不包含匹配文本的所有行。</span><br><span class="line">-R: 连同子目录中所有文件一起查找。</span><br><span class="line"></span><br><span class="line">比如到系统头文件目录下查找所有包含printf的文件</span><br><span class="line">$ grep &#x27;printf&#x27; /usr/include -R</span><br></pre></td></tr></table></figure><h2 id="安装卸载软件"><a href="#安装卸载软件" class="headerlink" title="安装卸载软件"></a>安装卸载软件</h2><ul><li>更新源服务器列表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>更新完服务器列表后需要更新下源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update 更新源</span><br><span class="line">sudo apt-get install package 安装包</span><br><span class="line">sudo apt-get remove package 删除包</span><br><span class="line">sudo apt-cache search package 搜索软件包</span><br><span class="line">sudo apt-cache show package 获取包的相关信息，如说明、大小、版本等</span><br><span class="line">sudo apt-get install package --reinstall 重新安装包</span><br><span class="line">sudo apt-get -f install 修复安装</span><br><span class="line">sudo apt-get remove package --purge 删除包，包括配置文件等</span><br><span class="line">sudo apt-get build-dep package 安装相关的编译环境</span><br><span class="line">sudo apt-get upgrade 更新已安装的包</span><br><span class="line">sudo apt-get dist-upgrade 升级系统</span><br><span class="line">sudo apt-cache depends package 了解使用该包依赖那些包</span><br><span class="line">sudo apt-cache rdepends package 查看该包被哪些包依赖</span><br><span class="line">sudo apt-get source package 下载该包的源代码</span><br><span class="line">sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</span><br><span class="line">sudo apt-get check 检查是否有损坏的依赖</span><br></pre></td></tr></table></figure><ul><li>deb包安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安装deb软件包命令： sudo dpkg -i xxx.deb</span><br><span class="line">删除软件包命令： sudo dpkg -r xxx.deb</span><br><span class="line">连同配置文件一起删除命令： sudo dpkg -r --purge xxx.deb</span><br><span class="line">查看软件包信息命令： sudo dpkg -info xxx.deb</span><br><span class="line">查看文件拷贝详情命令： sudo dpkg -L xxx.deb</span><br><span class="line">查看系统中已安装软件包信息命令： sudo dpkg -l</span><br><span class="line">重新配置软件包命令： sudo dpkg-reconfigure xxx</span><br></pre></td></tr></table></figure><ul><li>源码安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 解压缩源代码包</span><br><span class="line">2. cd dir</span><br><span class="line">3. ./configure</span><br><span class="line">检测文件是否缺失，创建Makefile,检测编译环境</span><br><span class="line">4. make</span><br><span class="line">编译源码，生成库和可执行程序</span><br><span class="line">5. sudo make install</span><br><span class="line">把库和可执行程序，安装到系统路径下</span><br><span class="line">6. sudo make distclean</span><br><span class="line">删除和卸载软件</span><br></pre></td></tr></table></figure><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><ul><li>mount</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">mount [-t vfstype] -o options device dir</span><br><span class="line"></span><br><span class="line">其中：</span><br><span class="line">* -t vfstype 指定文件系统的类型，通常不必指定。mount 会自动选择正确的类型。常</span><br><span class="line">用类型有：</span><br><span class="line">光盘或光盘镜像：iso9660</span><br><span class="line">DOS fat16文件系统：msdos</span><br><span class="line">Windows 9x fat32文件系统：vfat</span><br><span class="line">Windows NT ntfs文件系统：ntfs</span><br><span class="line">Mount Windows文件网络共享：smbfs</span><br><span class="line">UNIX(LINUX) 文件网络共享：nfs</span><br><span class="line"></span><br><span class="line">* -o options 主要用来描述设备或档案的挂接方式。常用的参数有：</span><br><span class="line">loop：用来把一个文件当成硬盘分区挂接上系统</span><br><span class="line">ro：采用只读方式挂接设备</span><br><span class="line">rw：采用读写方式挂接设备</span><br><span class="line">iocharset：指定访问文件系统所用字符集</span><br><span class="line"></span><br><span class="line">* device 要挂接(mount)的设备。</span><br><span class="line">* dir设备在系统上的挂接点(mount point)。</span><br></pre></td></tr></table></figure><h3 id="挂接光盘镜像文件"><a href="#挂接光盘镜像文件" class="headerlink" title="挂接光盘镜像文件"></a>挂接光盘镜像文件</h3><ul><li>1.从光盘制作光盘镜像文件。将光盘放入光驱，执行下面的命令。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#cp /dev/cdrom /home/sunky/mydisk.iso 或</span><br><span class="line">#dd if=/dev/cdrom of=/home/sunky/mydisk.iso</span><br><span class="line"></span><br><span class="line">注：执行上面的任何一条命令都可将当前光驱里的光盘制作成光盘镜像文件/home/</span><br><span class="line">sunky/mydisk.iso</span><br></pre></td></tr></table></figure><ul><li>2.文件和目录制作成光盘镜像文件，执行下面的命令。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mkisofs -r -J -V mydisk -o /home/sunky/mydisk.iso /home/sunky/ mydir</span><br></pre></td></tr></table></figure><p>​注：这条命令将&#x2F;home&#x2F;sunky&#x2F;mydir目录下所有的目录和文件制作成光盘镜像文件&#x2F;<br>home&#x2F;sunky&#x2F;mydisk.iso，光盘卷标为：mydisk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-r 这个选项能够将文件的uid,gid设为0，因为uid与gid只在制作镜像者本身系统上有效，在其它电脑上没有对应</span><br><span class="line">的用户，所以留着也只是无效用户；将所有文件设置为可读。如果文件有可执行的权限的话，将继续保持其可执行</span><br><span class="line">的权限。去掉所有文件及文件夹可写权限，因为挂载的光盘镜像本身也就为只读系统，可写权限无意义。其它特殊</span><br><span class="line">权限都将被清空。</span><br><span class="line">-o 指定被创建的镜像文件名称(包含目录位置)</span><br><span class="line">-V 指定光盘标签，就像windows下面挂载系统盘时会显示系统盘的名字一样。</span><br><span class="line">-J 或-joliet选项表示使用Joliet格式(可使用unicode储存中文档名）由于在ISO 9660中有一些限制，如字符</span><br><span class="line">设置限制,文件名长度限制和目录树深度制。这些规定阻碍了用户复制数据，Joliet是ISO 9660的一个扩展，由</span><br><span class="line">Microsoft提出和实现。</span><br></pre></td></tr></table></figure><ul><li>3.光盘镜像文件的挂接(mount)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkisofs -r -J -V mydisk -o /home/itcast/mydisk.iso /home/itcast/object/</span><br></pre></td></tr></table></figure><p>​将&#x2F;home&#x2F;itcast&#x2F;object&#x2F;目录下的内容生成一个叫mydisk.iso的镜像文件保存在目录&#x2F;</p><p>home&#x2F;itcast&#x2F;下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mkdir /mnt/vcdrom</span><br></pre></td></tr></table></figure><p>​注：建立一个目录用来作挂接点(mount point)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mount -o loop -t iso9660 /home/sunky/mydisk.iso /mnt/vcdrom</span><br></pre></td></tr></table></figure><p>​注：使用&#x2F;mnt&#x2F;vcdrom就可以访问盘镜像文件mydisk.iso里的所有文件了。</p><h3 id="挂载U盘"><a href="#挂载U盘" class="headerlink" title="挂载U盘"></a>挂载U盘</h3><p>磁盘设备命名一般规则：</p><p>在Linux中，设备名称通常都保存在&#x2F;dev里，&#x2F;dev下的文件是特殊的设备文件，和特定</p><p>的驱动程序相关联。而这些设备的命名有一定的规则，可以使用“推理”方式把设备名称找</p><p>出来。</p><p>例如：&#x2F;dev&#x2F; sda1，“sd”是SCSI Device (hd是Hard Disk硬盘，fd是Floppy Disk</p><p>软盘)。其中“a”代表第一块硬盘，如果主机上装有4块硬盘，那么他们应该依次编号</p><p>sda、sdb、sdc、sdd。而sda1中的“1”代表sda的第一个主分区，sda2代表第二个主分区。</p><p>由于一块硬盘的主分区最多允许有4个，因此扩展分区的第一个逻辑分区从sda5开始向后依</p><p>次编号。</p><ul><li>1.检测存储设备名称</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure><ul><li>2.挂载存储设备sdb1到挂载点&#x2F;mnt目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mount /dev/sdb1 /mnt -o utf8</span><br><span class="line">可以使U盘内的中文正常显示出来。</span><br></pre></td></tr></table></figure><ul><li><p>3.访问&#x2F;mnt</p></li><li><p>4.卸载&#x2F;mnt</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount /mnt</span><br></pre></td></tr></table></figure><h3 id="umount"><a href="#umount" class="headerlink" title="umount"></a>umount</h3><p>卸载命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount 挂在点</span><br></pre></td></tr></table></figure><h3 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h3><p>dd:拷贝</p><p>例1：拷贝光碟(注意，你的光碟是标准的iso9660格式才可以这么做唷！)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/cdrom of=cdrom.iso</span><br></pre></td></tr></table></figure><p>例2：将文件sfile拷贝到文件dfile中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dd if=sfile of=dfile</span><br></pre></td></tr></table></figure><p>例3：创建一个100M的空文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=hello.txt bs=100M count=1</span><br></pre></td></tr></table></figure><p><em>&#x2F;dev&#x2F;null，外号叫无底洞，你可以向它输出任何数据，它通吃，并且不会撑着！</em></p><p><em>&#x2F;dev&#x2F;zero,是一个输入设备，你可你用它来初始化文件,从里面读出来的数据都是0。</em></p><p><em>使用mke2fs命令将常规文件格式化成分区当成文件系统来使用，使用mount借助loop设</em></p><p><em>备把映像文件当成磁盘分区挂载。</em></p><ul><li>1.以&#x2F;dev&#x2F;zero为输入文件，imagefile为输出创建一个2M大小的文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$dd if=/dev/zero of=imagefile bs=2048 count=1024</span><br></pre></td></tr></table></figure><ul><li>2.使用mke2fs命令将该文件制作成文件系统。制作期间需输入“y”确认。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$mke2fs imagefile</span><br></pre></td></tr></table></figure><ul><li>3.制作成功后可以将该文件使用mount命令借助loop挂载到&#x2F;mnt下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo mount -o loop imagefile /mnt</span><br></pre></td></tr></table></figure><ul><li>4.可以查看到lost+found缺省目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ls /mnt</span><br></pre></td></tr></table></figure><ul><li>5.可以像使用普通磁盘一样，直接在里面创建文件并写入内容。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo vi hello.c</span><br></pre></td></tr></table></figure><ul><li>6.lost+found hello.c</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ls /mnt</span><br></pre></td></tr></table></figure><ul><li>7.在&#x2F;mnt内执行mount命令可以查看该“文件系统”的详细信息。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$mount</span><br><span class="line">如：/home/itcast/mydisk on /mnt type ext2 (rw)</span><br></pre></td></tr></table></figure><ul><li>8.可使用umount命令将该“磁盘”卸载。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo umount /mnt</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;目录与文件&quot;&gt;&lt;a href=&quot;#目录与文件&quot; class=&quot;headerlink&quot; title=&quot;目录与文件&quot;&gt;&lt;/a&gt;目录与文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;more&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;more [OPTION] FILE…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;查看文本文件的内容，屏幕显示完一屏就等待用户按下任意键再滚动到下一屏，如果中途不想继续看下去了，可以按Ctrl+C或q终止显示。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;less&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;less [OPTION] FILE…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;查看文本文件的内容，屏幕显示完一屏就等待用户按键，用户可以向上或向下查看，如&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;果中途不想继续看下去了，可以按Ctrl+C或q终止显示。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;head&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;head [OPTION]… FILE…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;显示指定文件的前面几行。如果没有指定文件，将从标准输入（键盘）上读取。如果没&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有指定要显示的行数，则默认显示前10行。如果要显示文件的前5行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ head -5 file1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;tail&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tail [OPTION]… FILE…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;显示文件的最后几行。若没有指定显示的行或字符数，则默认显示末尾10行。如果要显&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示文件末5行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ tail -5 file1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;ln&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="服务器" scheme="https://www.itcode.net.cn/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="Linux" scheme="https://www.itcode.net.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MAC（M1）配置51单片机环境</title>
    <link href="https://www.itcode.net.cn/posts/cdcb5503/"/>
    <id>https://www.itcode.net.cn/posts/cdcb5503/</id>
    <published>2023-07-25T14:58:29.000Z</published>
    <updated>2023-08-10T11:05:32.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Rosetta2"><a href="#安装Rosetta2" class="headerlink" title="安装Rosetta2"></a>安装Rosetta2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/softwareupdate --install-rosetta --agree-to-license</span><br></pre></td></tr></table></figure><h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><p>使用Rosetta2安装Homebrew</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arch -x86_64 /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span><br><span class="line"></span><br><span class="line">#在安装或更新应用时使用下面的命令即可：arch -x86_64 brew install &lt;package&gt;</span><br></pre></td></tr></table></figure><h2 id="编译器sdcc"><a href="#编译器sdcc" class="headerlink" title="编译器sdcc"></a><strong>编译器sdcc</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arch -x86_64 brew install  sdcc</span><br><span class="line"></span><br><span class="line">#校验是否安装成功</span><br><span class="line">sdcc -version</span><br></pre></td></tr></table></figure><h2 id="安装CH341驱动"><a href="#安装CH341驱动" class="headerlink" title="安装CH341驱动"></a><strong>安装CH341驱动</strong></h2><p>为让开发版上的USB转串口模块成功连接到Mac上，我们需要CH341驱动来为Mac系统驱动</p><p> 下载地址：<a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html">http://www.wch.cn/download/CH341SER_MAC_ZIP.html</a></p><p> 下载好后将文件解压双击.pkg结尾的文件开始安装，一直点下一步即可完成安装</p><p> 接下来将单片机连接到Mac上（我使用的是STC89型号的），输入一下命令来检验驱动是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /dev/tty.wchusbser*</span><br></pre></td></tr></table></figure><p> 如果输出一下数据，说明驱动成功</p><p><img src="https://img.itcode.net.cn/blog/202307252302449.png" alt="image-tany"></p><p>注意⚠️：其中140代表串口号</p><h2 id="安装烧录程序stcgal"><a href="#安装烧录程序stcgal" class="headerlink" title="安装烧录程序stcgal"></a><strong>安装烧录程序stcgal</strong></h2><p> stcgal 是 STC 单片机的下载工具，安装前需确保已提前安装好 python3。</p><p>下载stcgal地址： <a href="https://github.com/grigorig/stcgal">https://github.com/grigorig/stcgal</a></p><p><img src="https://img.itcode.net.cn/blog/202307252301556.png" alt="image-uyef"></p><p>直接下载源码，解压文件即可，再在终端中cd命令进入解压文件夹（一直按tab键来补全路经）</p><p>输入以下两行代码即可安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./setup.py build</span><br><span class="line">sudo ./setup.py install</span><br><span class="line"></span><br><span class="line">#检测版本信息</span><br><span class="line">stcgal -V</span><br></pre></td></tr></table></figure><h2 id="调试单片机"><a href="#调试单片机" class="headerlink" title="调试单片机"></a>调试单片机</h2><h4 id="输入代码"><a href="#输入代码" class="headerlink" title="输入代码"></a><strong>输入代码</strong></h4><p>在编译器上输入以下代码来用数码管点亮SSPAL（编译器我使用的是CLion），将代码以main.c的保存在桌面上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;8051.h&gt;</span><br><span class="line"></span><br><span class="line">unsigned char Table[] = &#123;0x6D,0x73,0x77,0x30&#125;; //对应SPAI四个字母</span><br><span class="line"></span><br><span class="line">void Delay(unsigned int x)//@11.0592MHz下延迟1ms</span><br><span class="line">&#123;</span><br><span class="line">unsigned char i, j;</span><br><span class="line">while(x--)</span><br><span class="line">&#123;</span><br><span class="line">i = 2;</span><br><span class="line">j = 199;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">while (--j);</span><br><span class="line">&#125; while (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Turn_ON(unsigned int Location ,unsigned int Num1)  //点亮</span><br><span class="line">&#123;</span><br><span class="line">switch(Location) //片选</span><br><span class="line">&#123;</span><br><span class="line">case 1:P2_4=1;P2_3=1;P2_2=1;break;</span><br><span class="line">case 2:P2_4=1;P2_3=1;P2_2=0;break;</span><br><span class="line">case 3:P2_4=1;P2_3=0;P2_2=1;break;</span><br><span class="line">case 4:P2_4=1;P2_3=0;P2_2=0;break;</span><br><span class="line">case 5:P2_4=0;P2_3=1;P2_2=1;break;</span><br><span class="line">case 6:P2_4=0;P2_3=1;P2_2=0;break;</span><br><span class="line">case 7:P2_4=0;P2_3=0;P2_2=1;break;</span><br><span class="line">case 8:P2_4=0;P2_3=0;P2_2=0;break;</span><br><span class="line">&#125;</span><br><span class="line">P0=Table[Num1]; //段选</span><br><span class="line">Delay(1);</span><br><span class="line">P0=0x00;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main() //主函数</span><br><span class="line">&#123;</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">Turn_ON(1,0);</span><br><span class="line">Turn_ON(2,0);</span><br><span class="line">Turn_ON(3,1);</span><br><span class="line">Turn_ON(4,2);</span><br><span class="line">Turn_ON(5,3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用sdcc进行编译"><a href="#使用sdcc进行编译" class="headerlink" title="使用sdcc进行编译"></a><strong>使用sdcc进行编译</strong></h4><p> 使用终端进入到代码的所在目录下，输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdcc main.c</span><br></pre></td></tr></table></figure><p>就可以发现文件夹中多出了一系列文件</p><h4 id="使用stcgal将代码烧录入单片机中"><a href="#使用stcgal将代码烧录入单片机中" class="headerlink" title="使用stcgal将代码烧录入单片机中"></a><strong>使用stcgal将代码烧录入单片机中</strong></h4><p> 输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stcgal -P stc89 -p /dev/tty.wchusbserial140</span><br></pre></td></tr></table></figure><p> -P后参数表示单片机型号，例如我的是STC89，-p后参数表示单片机串口号</p><p><img src="https://img.itcode.net.cn/blog/202307252303552.png" alt="image-eghl"></p><p>注意⚠️：在执行stcgal命令，需要给单片机断电再重新接电才能完成写入过程</p><h4 id="点亮了单片机上的SSPAL！"><a href="#点亮了单片机上的SSPAL！" class="headerlink" title="点亮了单片机上的SSPAL！"></a><strong>点亮了单片机上的SSPAL！</strong></h4><p><img src="https://img.itcode.net.cn/blog/202307252303331.png" alt="image-lfqb"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装Rosetta2&quot;&gt;&lt;a href=&quot;#安装Rosetta2&quot; class=&quot;headerlink&quot; title=&quot;安装Rosetta2&quot;&gt;&lt;/a&gt;安装Rosetta2&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/sbin/softwareupdate --install-rosetta --agree-to-license&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;安装Homebrew&quot;&gt;&lt;a href=&quot;#安装Homebrew&quot; class=&quot;headerlink&quot; title=&quot;安装Homebrew&quot;&gt;&lt;/a&gt;安装Homebrew&lt;/h2&gt;&lt;p&gt;使用Rosetta2安装Homebrew&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;arch -x86_64 /bin/bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#在安装或更新应用时使用下面的命令即可：arch -x86_64 brew install &amp;lt;package&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;编译器sdcc&quot;&gt;&lt;a href=&quot;#编译器sdcc&quot; class=&quot;headerlink&quot; title=&quot;编译器sdcc&quot;&gt;&lt;/a&gt;&lt;strong&gt;编译器sdcc&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;arch -x86_64 brew install  sdcc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#校验是否安装成功&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sdcc -version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;安装CH341驱动&quot;&gt;&lt;a href=&quot;#安装CH341驱动&quot; class=&quot;headerlink&quot; title=&quot;安装CH341驱动&quot;&gt;&lt;/a&gt;&lt;strong&gt;安装CH341驱动&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;为让开发版上的USB转串口模块成功连接到Mac上，我们需要CH341驱动来为Mac系统驱动&lt;/p&gt;
&lt;p&gt; 下载地址：&lt;a href=&quot;http://www.wch.cn/download/CH341SER_MAC_ZIP.html&quot;&gt;http://www.wch.cn/download/CH341SER_MAC_ZIP.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="嵌入式" scheme="https://www.itcode.net.cn/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="单片机" scheme="https://www.itcode.net.cn/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
</feed>
